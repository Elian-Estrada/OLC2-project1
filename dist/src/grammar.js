import {type, Relational_operator, Logical_operator, Arithmetic_operator, String_operator} from "./SymbolTable/Type.js"
import { Arithmetic } from "./Expression/Arithmetic.js";
import { Logical } from "./Expression/Logical.js";
import { Relational } from "./Expression/Relational.js";
import { Primitive } from "./Expression/Primitive.js";
import { Identifier } from "./Expression/Identifier.js";
import { StringText } from "./Expression/StringText.js";
import { Ternary } from "./Expression/Ternary.js";
import { Access_array } from "./Expression/Access_array.js"

import { Declaration } from "./Instructions/Declaration.js"
import { Declaration_array } from "./Instructions/Declaration_array.js"
import { Assignment } from "./Instructions/Assignment.js"
import { Print } from "./Instructions/Print.js";
import { Inc_Dec } from "./Instructions/Inc_Dec.js";
import { If } from "./Instructions/If.js";
import { While } from "./Instructions/While.js";
import { Switch } from "./Instructions/Switch.js";
import { Case } from "./Instructions/Case.js";
import { Break } from "./Instructions/Break.js";
import { Return } from "./Instructions/Return.js";
import { Continue } from "./Instructions/Continue.js";
import { For } from "./Instructions/For.js";
import { ForIn } from "./Instructions/ForIn.js";
import { DoWhile } from "./Instructions/DoWhile.js";
import { Function } from "./Instructions/Function.js";
import Exception from "./SymbolTable/Exception.js";
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export let errors = [];
export var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,18],$V2=[1,19],$V3=[1,29],$V4=[1,20],$V5=[1,21],$V6=[1,37],$V7=[1,40],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,41],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[5,22,35,36,38,41,43,48,49,50,53,56,57,58,59,62,67,68,69,70,71,72,73],$Vl=[1,45],$Vm=[1,57],$Vn=[1,62],$Vo=[1,59],$Vp=[1,60],$Vq=[1,77],$Vr=[1,78],$Vs=[1,76],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,75],$VA=[1,80],$VB=[1,81],$VC=[22,27],$VD=[20,26],$VE=[2,21],$VF=[1,87],$VG=[20,37],$VH=[20,23,26,27,28,37,39,40,42,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VI=[1,104],$VJ=[1,105],$VK=[1,100],$VL=[1,99],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[1,112],$VW=[1,113],$VX=[1,114],$VY=[20,26,28,37,39,40,42,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VZ=[20,26,28,37,42,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$V_=[20,26,28,37,42,54,86,87],$V$=[1,153],$V01=[20,26,28,37,42,54,74,75,79,80,81,82,83,84,85,86,87],$V11=[1,173],$V21=[1,177],$V31=[1,179],$V41=[43,53,56],$V51=[20,26,28],$V61=[26,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"ptcommP":7,"declaration":8,"assignment":9,"declaration_array":10,"assignment_array":11,"prod_print":12,"inc_dec":13,"prod_if":14,"prod_loops":15,"prod_switch":16,"transfer_prod":17,"prod_ternary":18,"functions":19,"SEMICOLON":20,"type":21,"IDENTIFIER":22,"EQUALSIGN":23,"expression":24,"list_id":25,"COMMASIGN":26,"BRACKETLEFT":27,"BRACKETRIGHT":28,"values_array":29,"COPY":30,"list_values_array":31,"values":32,"list_brackets":33,"brackets":34,"RPRINT":35,"PARLEFT":36,"PARRIGHT":37,"RPRINTLN":38,"INCSIGN":39,"DECSIGN":40,"RIF":41,"CURLYLEFT":42,"CURLYRIGHT":43,"RELSE":44,"prod_while":45,"for_prod":46,"do_prod":47,"RWHILE":48,"RDO":49,"RSWITCH":50,"prod_default":51,"list_cases":52,"RDEFAULT":53,"TWOPOINTS":54,"case":55,"RCASE":56,"RBREAK":57,"RRETURN":58,"RCONTINUE":59,"for_it":60,"for_in":61,"RFOR":62,"for_init":63,"for_step":64,"RIN":65,"VALUEIFTRUE":66,"RINT":67,"RDOUBLE":68,"RBOOLEAN":69,"RCHAR":70,"RSTRING":71,"RNULL":72,"RVOID":73,"SUBSIGN":74,"PLUSSIGN":75,"MULTSIGN":76,"DIVSIGN":77,"MODSIGN":78,"EQUALIZATIONSIGN":79,"DIFFSIGN":80,"LESSEQUAL":81,"GREATEREQUAL":82,"SMALLERTHAN":83,"GREATERTHAN":84,"CONCAT":85,"AND":86,"OR":87,"NOT":88,"INTEGER":89,"DOUBLE":90,"STRING":91,"CHAR":92,"boolean":93,"VOID":94,"RTRUE":95,"RFALSE":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"SEMICOLON",22:"IDENTIFIER",23:"EQUALSIGN",26:"COMMASIGN",27:"BRACKETLEFT",28:"BRACKETRIGHT",30:"COPY",35:"RPRINT",36:"PARLEFT",37:"PARRIGHT",38:"RPRINTLN",39:"INCSIGN",40:"DECSIGN",41:"RIF",42:"CURLYLEFT",43:"CURLYRIGHT",44:"RELSE",48:"RWHILE",49:"RDO",50:"RSWITCH",53:"RDEFAULT",54:"TWOPOINTS",56:"RCASE",57:"RBREAK",58:"RRETURN",59:"RCONTINUE",62:"RFOR",65:"RIN",66:"VALUEIFTRUE",67:"RINT",68:"RDOUBLE",69:"RBOOLEAN",70:"RCHAR",71:"RSTRING",72:"RNULL",73:"RVOID",74:"SUBSIGN",75:"PLUSSIGN",76:"MULTSIGN",77:"DIVSIGN",78:"MODSIGN",79:"EQUALIZATIONSIGN",80:"DIFFSIGN",81:"LESSEQUAL",82:"GREATEREQUAL",83:"SMALLERTHAN",84:"GREATERTHAN",85:"CONCAT",86:"AND",87:"OR",88:"NOT",89:"INTEGER",90:"DOUBLE",91:"STRING",92:"CHAR",94:"VOID",95:"RTRUE",96:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[7,1],[8,4],[8,2],[25,3],[25,1],[9,3],[10,6],[10,6],[10,7],[29,3],[29,2],[31,3],[31,1],[32,1],[32,1],[11,4],[33,2],[33,1],[34,3],[12,4],[12,4],[13,2],[13,2],[14,7],[14,11],[14,9],[14,5],[15,1],[15,1],[15,1],[45,7],[47,9],[16,7],[16,7],[16,8],[51,3],[52,2],[52,1],[55,4],[17,1],[17,2],[17,1],[17,1],[46,1],[46,1],[60,11],[61,7],[63,1],[63,1],[64,1],[64,1],[18,7],[19,7],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[24,3],[24,1],[93,1],[93,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	    return $$[$0-1];
	
break;
case 2: case 33:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 29: case 34:
 this.$ = [$$[$0]]; 
break;
case 4:
 errors.push(new Exception("Sintactic", `Sintactic error ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 14: case 15: case 26: case 35: case 104:
 this.$ = $$[$0-1]; 
break;
case 11: case 12: case 13: case 16: case 30: case 31: case 44: case 45: case 46: case 52: case 60: case 61: case 64: case 65: case 66: case 67: case 105:
 this.$ = $$[$0]; 
break;
case 18:
 this.$ = new Declaration([$$[$0-2]], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 19:
 this.$ = new Declaration($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 20:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 21:
 this.$ = []; this.$.push($$[$0]); 
break;
case 22:
 this.$ = new Assignment($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Declaration_array($$[$0-3], $$[$0-6], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column, false); 
break;
case 27:
 this.$ = []; 
break;
case 28:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 32:
 this.$ = new Access_array(new Identifier($$[$0-3], this._$.first_line, this._$.first_column), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 36:

        this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false);
    
break;
case 37:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 38:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.INC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.DEC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 40:

        this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 41:

        this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 42:

        this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 43:

        this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 47:

        this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 48:

        this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 49:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 50:

            this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 51:

            this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 53:
 ($$[$0] != null) ? $$[$0-1].push($$[$0]) : null; this.$ = $$[$0-1]; 
break;
case 54:
 this.$ = ($$[$0] == null) ? [] : [$$[$0]] 
break;
case 55:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 56:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 57:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
 this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 62:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 63:

        this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 68:

        this.$ = new Ternary($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 69:

        this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 70:
 this.$ = type.INT; 
break;
case 71:
 this.$ = type.DOUBLE; 
break;
case 72:
 this.$ = type.BOOL; 
break;
case 73:
 this.$ = type.CHAR; 
break;
case 74:
 this.$ = type.STRING; 
break;
case 75:
 this.$ = type.NULL; 
break;
case 76:
 this.$ = type.VOID; 
break;
case 77:
 this.$ = new Arithmetic($$[$0], null, Arithmetic_operator.SUBSTRACTION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.ADDITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.SUBSTRACTION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MULTIPLICATION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MODULS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.INC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 84:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.DEC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 85:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.UNEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESSEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATEREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Logical($$[$0], null, Logical_operator.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new Primitive($$[$0], type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 96:
 this.$ = new Primitive($$[$0], type.DOUBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 97:
 this.$ = new Primitive($$[$0], type.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new Primitive($$[$0], type.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 this.$ = new Primitive($$[$0], type.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new Primitive($$[$0], type.VOID, _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new Primitive($$[$0], type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Access_array(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 103:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 106: case 107:
 this.$ = $$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{1:[3]},{5:[1,42],6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},o($Vk,[2,3]),{7:44,20:$Vl},{7:46,20:$Vl},{7:47,20:$Vl},{7:48,20:$Vl},{7:49,20:$Vl},{7:50,20:$Vl},{7:51,20:$Vl},o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),{7:52,20:$Vl},{7:53,20:$Vl},o($Vk,[2,16]),{22:[1,54],25:55,27:[1,56]},{23:$Vm,27:$Vn,33:58,34:61,39:$Vo,40:$Vp},{36:[1,63]},{36:[1,64]},{36:[1,65]},o($Vk,[2,44]),o($Vk,[2,45]),o($Vk,[2,46]),{36:[1,66]},{20:[2,56]},{18:79,20:[2,58],22:$Vq,24:67,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{20:[2,59]},{18:79,22:$Vq,24:82,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($VC,[2,74]),o($VC,[2,75]),o($VC,[2,76]),{36:[1,83]},o($Vk,[2,60]),o($Vk,[2,61]),{42:[1,84]},{22:[1,86],36:[1,85]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,17]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,14]),o($Vk,[2,15]),o($VD,$VE,{23:$VF,36:[1,88]}),{20:[2,19],26:[1,89]},{28:[1,90]},{18:79,22:$Vq,24:91,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{23:[1,92],27:$Vn,34:93},o($VG,[2,38]),o($VG,[2,39]),o($VH,[2,34]),{18:79,22:$Vq,24:94,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:95,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:96,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:97,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:98,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{20:[2,57],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{18:79,22:$Vq,24:115,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:116,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VY,[2,95]),o($VY,[2,96]),o($VY,[2,97]),o($VY,[2,98]),o($VY,[2,99]),o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,103],{34:61,33:117,27:$Vn}),{18:79,22:$Vq,24:118,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VY,[2,105]),o($VY,[2,106]),o($VY,[2,107]),{37:[1,119],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{18:79,22:$Vq,24:120,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{2:$V0,4:121,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{8:123,9:124,21:125,22:[1,126],63:122,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{65:[1,127]},{18:79,22:$Vq,24:128,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{37:[1,129]},{22:[1,130]},{22:[1,131]},o($VG,[2,22],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX}),{18:79,22:$Vq,24:132,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VH,[2,33]),{28:[1,133],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{37:[1,134],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{37:[1,135],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{37:[1,136],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{37:[1,137],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{18:79,22:$Vq,24:138,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:139,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:140,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:141,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:142,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VY,[2,83]),o($VY,[2,84]),{18:79,22:$Vq,24:143,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:144,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:145,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:146,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:147,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:148,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:149,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:150,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:151,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VZ,[2,77],{39:$VI,40:$VJ}),o($V_,[2,94],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV}),o($VY,[2,102],{34:93,27:$Vn}),{37:[1,152],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{66:$V$},{37:[1,154],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,155],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{20:[1,156]},{20:[2,64]},{20:[2,65]},{22:[1,157],25:55},{23:$Vm},{18:79,22:$Vq,24:158,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{20:[2,18],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{42:[1,159]},o($VD,[2,20]),{23:[1,160]},{20:[2,32],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},o($VH,[2,35]),{20:[2,36]},{20:[2,37]},{6:162,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,42:[1,161],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{42:[1,163]},o($V01,[2,78],{39:$VI,40:$VJ,76:$VM,77:$VN,78:$VO}),o($V01,[2,79],{39:$VI,40:$VJ,76:$VM,77:$VN,78:$VO}),o($VZ,[2,80],{39:$VI,40:$VJ}),o($VZ,[2,81],{39:$VI,40:$VJ}),o($VZ,[2,82],{39:$VI,40:$VJ}),o($V_,[2,85],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V_,[2,86],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V_,[2,87],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V_,[2,88],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V_,[2,89],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V_,[2,90],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($V01,[2,91],{39:$VI,40:$VJ,76:$VM,77:$VN,78:$VO}),o($V_,[2,92],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV}),o([20,26,28,37,42,54,87],[2,93],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW}),o($VY,[2,104],{66:$V$}),{18:79,22:$Vq,24:164,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{42:[1,165]},{48:[1,166]},{18:79,22:$Vq,24:167,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},o($VD,$VE,{23:$VF}),{39:$VI,40:$VJ,42:[1,168],74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{2:$V0,4:169,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{22:[1,171],27:$V11,29:170,30:[1,172]},{2:$V0,4:174,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},o($Vk,[2,43]),{51:175,52:176,53:$V21,55:178,56:$V31},{39:$VI,40:$VJ,54:[1,180],74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{2:$V0,4:181,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{36:[1,182]},{20:[1,183],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{2:$V0,4:184,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,185],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{20:[2,23]},{20:[2,24]},{22:[1,186]},{18:79,22:$Vq,24:190,27:$V11,28:[1,188],29:191,31:187,32:189,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,192],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{43:[1,193]},{43:[1,194],51:195,53:$V21,55:196,56:$V31},{54:[1,197]},o($V41,[2,54]),{18:79,22:$Vq,24:198,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{18:79,22:$Vq,24:199,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,200],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{18:79,22:$Vq,24:201,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{9:204,13:203,22:[1,205],64:202},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,206],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},o($Vk,[2,69]),{20:[2,25]},{26:[1,208],28:[1,207]},o($V51,[2,27]),o($V61,[2,29]),o($V61,[2,30],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX}),o($V61,[2,31]),o($Vk,[2,40],{44:[1,209]}),o($Vk,[2,49]),o($Vk,[2,50]),{43:[1,210]},o($V41,[2,53]),{2:$V0,4:211,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{39:$VI,40:$VJ,54:[1,212],74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},o($V_,[2,68],{39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,85:$VV}),o($Vk,[2,47]),{37:[1,213],39:$VI,40:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX},{37:[1,214]},{37:[2,66]},{37:[2,67]},{23:$Vm,39:$Vo,40:$Vp},o($Vk,[2,63]),o($V51,[2,26]),{18:79,22:$Vq,24:190,27:$V11,29:191,32:215,36:$Vr,72:$Vs,74:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:74,94:$Vz,95:$VA,96:$VB},{14:217,41:$V5,42:[1,216]},o($Vk,[2,51]),{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[2,52],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{2:$V0,4:218,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{7:219,20:$Vl},{42:[1,220]},o($V61,[2,28]),{2:$V0,4:221,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},o($Vk,[2,42]),o($V41,[2,55],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,45:22,46:23,47:24,60:38,61:39,6:43,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj}),o($Vk,[2,48]),{2:$V0,4:222,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,223],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:$V1,35:$V2,36:$V3,38:$V4,41:$V5,43:[1,224],45:22,46:23,47:24,48:$V6,49:$V7,50:$V8,57:$V9,58:$Va,59:$Vb,60:38,61:39,62:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj},o($Vk,[2,41]),o($Vk,[2,62])],
defaultActions: {26:[2,56],28:[2,59],42:[2,1],123:[2,64],124:[2,65],134:[2,36],135:[2,37],170:[2,23],171:[2,24],186:[2,25],203:[2,66],204:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Spaces Ignored
break;
case 1:// Comment inline
break;
case 2:// Comment multiline
break;
case 3:return 67;
break;
case 4:return 72;
break;
case 5:return 68;
break;
case 6:return 69;
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 41;
break;
case 10:return 44;
break;
case 11:return 50;
break;
case 12:return 56;
break;
case 13:return 53;
break;
case 14:return 48;
break;
case 15:return 62;
break;
case 16:return 49;
break;
case 17:return 65;
break;
case 18:return 'RSTRUCT';
break;
case 19:return 'RBEGIN';
break;
case 20:return 'REND';
break;
case 21:return 57;
break;
case 22:return 59;
break;
case 23:return 58;
break;
case 24:return 73;
break;
case 25:return 'RPOW';
break;
case 26:return 'RSQRT';
break;
case 27:return 'RSIN';
break;
case 28:return 'RCOS';
break;
case 29:return 'RTAN';
break;
case 30:return 35;
break;
case 31:return 38;
break;
case 32:return 95;
break;
case 33:return 96;
break;
case 34:return 54;
break;
case 35:return 26;
break;
case 36:return 'REPETITIONSIGN';
break;
case 37:return 30;
break;
case 38:return 36;
break;
case 39:return 37;
break;
case 40:return 'COMMA';
break;
case 41:return 27;
break;
case 42:return 28;
break;
case 43:return 20;
break;
case 44:return 42;
break;
case 45:return 43;
break;
case 46:return "INCSIGN";
break;
case 47:return "DECSIGN";
break;
case 48:return 75;
break;
case 49:return 74;
break;
case 50:return 76;
break;
case 51:return 77;
break;
case 52:return 78;
break;
case 53:return 79;
break;
case 54:return 80;
break;
case 55:return 81;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 84;
break;
case 59:return 87;
break;
case 60:return 86;
break;
case 61:return 88;
break;
case 62:return 85;
break;
case 63:return "EQUALSIGN";
break;
case 64:return "VALUEIFTRUE";
break;
case 65:
break;
case 66:
break;
case 67: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 91; 
break;
case 68: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); 	return 92; 
break;
case 69:return 90;
break;
case 70:return 89;
break;
case 71:return 22;
break;
case 72:return 5;
break;
case 73: errors.push(new Exception("Lexical", `Lexical error ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:null\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:struct\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:&)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}