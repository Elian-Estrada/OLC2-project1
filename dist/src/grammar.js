import {type, Relational_operator, Logical_operator, Arithmetic_operator, String_operator} from "./SymbolTable/Type.js"
import { Arithmetic } from "./Expression/Arithmetic.js";
import { Logical } from "./Expression/Logical.js";
import { Relational } from "./Expression/Relational.js";
import { Primitive } from "./Expression/Primitive.js";
import { Identifier } from "./Expression/Identifier.js";
import { StringText } from "./Expression/StringText.js";
import { Ternary } from "./Expression/Ternary.js";
import { Values_array } from "./Expression/Values_array.js";
import { Access_array } from "./Expression/Access_array.js";
import { Access_struct } from "./Expression/Access_struct.js";

import { Declaration } from "./Instructions/Declaration.js";
import { Declaration_array } from "./Instructions/Declaration_array.js";
import { Assignment } from "./Instructions/Assignment.js";
import { Print } from "./Instructions/Print.js";
import { Inc_Dec } from "./Instructions/Inc_Dec.js";
import { If } from "./Instructions/If.js";
import { While } from "./Instructions/While.js";
import { Switch } from "./Instructions/Switch.js";
import { Case } from "./Instructions/Case.js";
import { Break } from "./Instructions/Break.js";
import { Return } from "./Instructions/Return.js";
import { Continue } from "./Instructions/Continue.js";
import { For } from "./Instructions/For.js";
import { ForIn } from "./Instructions/ForIn.js";
import { DoWhile } from "./Instructions/DoWhile.js";
import { Function } from "./Instructions/Function.js";
import { Call } from "./Instructions/Call.js";
import Exception from "./SymbolTable/Exception.js";
import {MainInstruction} from "./Instructions/MainInstruction.js";
import { Struct } from "./Instructions/Struct.js";
import { Length } from "./Nativas/Length.js";
import { ToUpperCase } from "./Nativas/ToUpperCase.js";
import { ToLowerCase } from "./Nativas/ToLowerCase.js";
import { CaracterOfPosition } from "./Nativas/CaracterOfPosition.js";
import { SubString } from "./Nativas/SubString.js";
import { Parse } from "./Nativas/Parse.js";

let errors = [];
function clean_errors(){
    errors = [];
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,23],$V2=[1,24],$V3=[1,34],$V4=[1,25],$V5=[1,26],$V6=[1,46],$V7=[1,49],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,50],$Vd=[1,45],$Ve=[1,37],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[2,5,27,40,41,43,46,48,53,54,55,58,61,62,63,64,67,74,80,86,87,88,89,90,91],$Vm=[1,54],$Vn=[1,73],$Vo=[1,80],$Vp=[1,77],$Vq=[1,75],$Vr=[1,76],$Vs=[1,78],$Vt=[1,95],$Vu=[1,96],$Vv=[1,94],$Vw=[1,88],$Vx=[1,86],$Vy=[1,87],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,93],$VD=[1,101],$VE=[1,102],$VF=[1,108],$VG=[27,33,85],$VH=[2,112],$VI=[25,31],$VJ=[2,27],$VK=[1,114],$VL=[1,119],$VM=[1,123],$VN=[25,42],$VO=[25,28,31,33,34,42,44,45,47,59,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],$VP=[1,147],$VQ=[1,148],$VR=[1,143],$VS=[1,142],$VT=[1,144],$VU=[1,145],$VV=[1,146],$VW=[1,149],$VX=[1,150],$VY=[1,151],$VZ=[1,152],$V_=[1,153],$V$=[1,154],$V01=[1,155],$V11=[1,156],$V21=[1,157],$V31=[1,158],$V41=[25,31,34,42,44,45,47,59,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],$V51=[1,177],$V61=[1,184],$V71=[31,42],$V81=[25,28,31,33,34,42,44,45,47,59,85,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],$V91=[25,31,34,42,47,59,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],$Va1=[25,31,34,42,47,59,112,113],$Vb1=[1,225],$Vc1=[1,229],$Vd1=[1,240],$Ve1=[25,31,34,42],$Vf1=[31,34],$Vg1=[25,31,34,42,47,59,99,100,104,105,106,107,108,109,110,111,112,113],$Vh1=[31,48],$Vi1=[1,286],$Vj1=[1,288],$Vk1=[48,58,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"declaration":7,"ptcommP":8,"assignment":9,"declaration_array":10,"assignment_array":11,"prod_print":12,"inc_dec":13,"prod_if":14,"prod_loops":15,"prod_switch":16,"transfer_prod":17,"prod_ternary":18,"functions":19,"call_function":20,"struct":21,"native_strings":22,"native_function":23,"assignment_struct":24,"SEMICOLON":25,"type":26,"IDENTIFIER":27,"EQUALSIGN":28,"expression":29,"list_id":30,"COMMASIGN":31,"values_array":32,"BRACKETLEFT":33,"BRACKETRIGHT":34,"COPY":35,"list_values_array":36,"values":37,"list_brackets":38,"brackets":39,"RPRINT":40,"PARLEFT":41,"PARRIGHT":42,"RPRINTLN":43,"INCSIGN":44,"DECSIGN":45,"RIF":46,"CURLYLEFT":47,"CURLYRIGHT":48,"RELSE":49,"prod_while":50,"for_prod":51,"do_prod":52,"RWHILE":53,"RDO":54,"RSWITCH":55,"prod_default":56,"list_cases":57,"RDEFAULT":58,"TWOPOINTS":59,"case":60,"RCASE":61,"RBREAK":62,"RRETURN":63,"RCONTINUE":64,"for_it":65,"for_in":66,"RFOR":67,"for_init":68,"for_step":69,"RIN":70,"VALUEIFTRUE":71,"function_main":72,"function_general":73,"RVOID":74,"RMAIN":75,"list_params":76,"params":77,"list_params_call":78,"params_call":79,"RSTRUCT":80,"attribute_list":81,"attribute":82,"access_struct":83,"list_attributes":84,"DOT":85,"RINT":86,"RDOUBLE":87,"RBOOLEAN":88,"RCHAR":89,"RSTRING":90,"RNULL":91,"RLENGTH":92,"RUPPER":93,"RLOWER":94,"RCHAROF":95,"INTEGER":96,"RSUBSTRING":97,"RPARSE":98,"SUBSIGN":99,"PLUSSIGN":100,"MULTSIGN":101,"DIVSIGN":102,"MODSIGN":103,"EQUALIZATIONSIGN":104,"DIFFSIGN":105,"LESSEQUAL":106,"GREATEREQUAL":107,"SMALLERTHAN":108,"GREATERTHAN":109,"CONCAT":110,"REPETITIONSIGN":111,"AND":112,"OR":113,"NOT":114,"DOUBLE":115,"STRING":116,"CHAR":117,"boolean":118,"VOID":119,"RTRUE":120,"RFALSE":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"SEMICOLON",27:"IDENTIFIER",28:"EQUALSIGN",31:"COMMASIGN",33:"BRACKETLEFT",34:"BRACKETRIGHT",35:"COPY",40:"RPRINT",41:"PARLEFT",42:"PARRIGHT",43:"RPRINTLN",44:"INCSIGN",45:"DECSIGN",46:"RIF",47:"CURLYLEFT",48:"CURLYRIGHT",49:"RELSE",53:"RWHILE",54:"RDO",55:"RSWITCH",58:"RDEFAULT",59:"TWOPOINTS",61:"RCASE",62:"RBREAK",63:"RRETURN",64:"RCONTINUE",67:"RFOR",70:"RIN",71:"VALUEIFTRUE",74:"RVOID",75:"RMAIN",80:"RSTRUCT",85:"DOT",86:"RINT",87:"RDOUBLE",88:"RBOOLEAN",89:"RCHAR",90:"RSTRING",91:"RNULL",92:"RLENGTH",93:"RUPPER",94:"RLOWER",95:"RCHAROF",96:"INTEGER",97:"RSUBSTRING",98:"RPARSE",99:"SUBSIGN",100:"PLUSSIGN",101:"MULTSIGN",102:"DIVSIGN",103:"MODSIGN",104:"EQUALIZATIONSIGN",105:"DIFFSIGN",106:"LESSEQUAL",107:"GREATEREQUAL",108:"SMALLERTHAN",109:"GREATERTHAN",110:"CONCAT",111:"REPETITIONSIGN",112:"AND",113:"OR",114:"NOT",115:"DOUBLE",116:"STRING",117:"CHAR",119:"VOID",120:"RTRUE",121:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[8,1],[7,4],[7,2],[7,4],[30,3],[30,1],[9,3],[9,3],[10,6],[10,6],[10,7],[32,3],[32,2],[36,3],[36,1],[37,1],[37,1],[11,4],[38,2],[38,1],[39,3],[12,4],[12,4],[13,2],[13,2],[14,7],[14,11],[14,9],[14,5],[15,1],[15,1],[15,1],[50,7],[52,9],[16,7],[16,7],[16,8],[56,3],[57,2],[57,1],[60,4],[17,1],[17,2],[17,1],[17,1],[51,1],[51,1],[65,11],[66,7],[68,1],[68,1],[69,1],[69,1],[18,7],[19,1],[19,1],[72,7],[73,7],[73,8],[73,7],[73,8],[76,3],[76,1],[20,3],[20,4],[78,3],[78,1],[79,1],[79,1],[77,2],[77,4],[77,2],[21,5],[81,3],[81,1],[82,2],[82,2],[82,4],[83,1],[83,2],[24,3],[24,4],[84,3],[84,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[22,5],[22,5],[22,5],[22,6],[22,8],[23,6],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[29,1],[29,3],[29,1],[29,1],[29,1],[29,1],[118,1],[118,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	    return $$[$0-1];
	
break;
case 2: case 40:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 36: case 41: case 84: case 88: case 96:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 13: case 14: case 16: case 17: case 18: case 19: case 20: case 33: case 42: case 147:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 15: case 37: case 38: case 51: case 52: case 53: case 59: case 67: case 68: case 71: case 72: case 73: case 74: case 76: case 77: case 89: case 90: case 148: case 149: case 150: case 151:
 this.$ = $$[$0]; 
break;
case 21:
 errors.push(new Exception("Sintactic", `Sintactic error ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 23:
 this.$ = new Declaration([$$[$0-2]], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 24:
 this.$ = new Declaration($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Declaration([$$[$0-2], $$[$0-3]], type.STRUCT, this._$.first_line, this._$.first_column, $$[$0]); 
break;
case 26:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 27:
 this.$ = []; this.$.push($$[$0]); 
break;
case 28:
 this.$ = new Assignment($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 29:
 this.$ = new Assignment($$[$0-2], new Values_array($$[$0], this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = new Declaration_array($$[$0-3], $$[$0-6], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column, false); 
break;
case 34:
 this.$ = []; 
break;
case 35:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 39:
 this.$ = new Access_array(new Identifier($$[$0-3], this._$.first_line, this._$.first_column), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 43:

        this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false);
    
break;
case 44:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 45:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.INC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 46:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.DEC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 47:

        this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 48:

        this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 49:

        this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 50:

        this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 54:

        this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 55:

        this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 56:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 57:

            this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 58:

            this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 60:
 ($$[$0] != null) ? $$[$0-1].push($$[$0]) : null; this.$ = $$[$0-1]; 
break;
case 61:
 this.$ = ($$[$0] == null) ? [] : [$$[$0]] 
break;
case 62:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 63:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 69:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 70:

        this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 75:

        this.$ = new Ternary($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 78:

        this.$ = new MainInstruction($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 79:

        this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 80:

        this.$ = new Function($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 81:

		this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 82:

		this.$ = new Function($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 83: case 87:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 85:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 91:

        this.$ = { type: $$[$0-1], name: $$[$0], row: this._$.first_line, column: this._$.first_column };
    
break;
case 92:
 this.$ = { type: type.ARRAY, sub_type: $$[$0-3], name: $$[$0], row: this._$.first_line, column: this._$.first_column }; 
break;
case 93:
 this.$ = { type: type.STRUCT, struct: $$[$0-1], name: $$[$0], row: this._$.first_line, column: this._$.first_column}; 
break;
case 94:
 this.$ = new Struct($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 95: case 104:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 97:
 this.$ = { "type": $$[$0-1], "id": $$[$0], "value": "null", "row": this._$.first_line, "column": this._$.first_column }; 
break;
case 98:
 this.$ = { "type": type.STRUCT, "struct": $$[$0-1], "id": $$[$0], "value": "null", "row": this._$.first_line, "column": this._$.first_column}; 
break;
case 99:
 this.$ = { "type": type.ARRAY, "sub_type": $$[$0-3], "id": $$[$0], "value": [], "row": this._$.first_line, "column": this._$.first_column}; 
break;
case 100:
 this.$ = new Access_struct($$[$0], null, null, this._$.first_line, this._$.first_column); 
break;
case 101:
 this.$ = new Access_struct($$[$0-1], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 102:
 this.$ = new Access_struct($$[$0-2], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 103:
 this.$ = new Access_struct($$[$0-3], $$[$0], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 105:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 106:
 this.$ = type.INT; 
break;
case 107:
 this.$ = type.DOUBLE; 
break;
case 108:
 this.$ = type.BOOL; 
break;
case 109:
 this.$ = type.CHAR; 
break;
case 110:
 this.$ = type.STRING; 
break;
case 111:
 this.$ = type.NULL; 
break;
case 112:
 this.$ = type.VOID; 
break;
case 113:

        this.$ = new Length(new Identifier($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, "length", [], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 114:

        this.$ = new ToUpperCase(new Identifier($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, "length", [], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 115:

        this.$ = new ToLowerCase(new Identifier($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, "length", [], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 116:

        this.$ = new CaracterOfPosition(new Identifier($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-1], null, "length", [], [], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 117:

        this.$ = new SubString(new Identifier($$[$0-7], _$[$0-7].first_line, _$[$0-7].first_column), $$[$0-3], $$[$0-1], null, "length", [], [], _$[$0-7].first_line, _$[$0-7].first_column)
    
break;
case 118:

          this.$ = new Parse($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 119:
 this.$ = new Arithmetic($$[$0], null, Arithmetic_operator.SUBSTRACTION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 120:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.ADDITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 121:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.SUBSTRACTION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 122:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MULTIPLICATION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 123:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 124:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MODULS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 125:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.INC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 126:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.DEC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 127:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 128:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.UNEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 129:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESSEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 130:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATEREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 131:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 132:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 133:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 134:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.REPETITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 135:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 136:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 137:
 this.$ = new Logical($$[$0], null, Logical_operator.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 138:
 this.$ = new Primitive($$[$0], type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 139:
 this.$ = new Primitive($$[$0], type.DOUBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 140:
 this.$ = new Primitive($$[$0], type.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 141:
 this.$ = new Primitive($$[$0], type.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 142:
 this.$ = new Primitive($$[$0], type.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 143:
 this.$ = new Primitive($$[$0], type.VOID, _$[$0].first_line, _$[$0].first_column); 
break;
case 144:
 this.$ = new Primitive($$[$0], type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 145:
 this.$ = new Access_array(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 146:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 152: case 153:
 this.$ = $$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vl,[2,3]),{8:53,25:$Vm},{8:55,25:$Vm},{8:56,25:$Vm},{8:57,25:$Vm},{8:58,25:$Vm},{8:59,25:$Vm},o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),{8:60,25:$Vm},{8:61,25:$Vm},o($Vl,[2,15]),{8:62,25:$Vm},{8:63,25:$Vm},{8:64,25:$Vm},{8:65,25:$Vm},{8:66,25:$Vm},{8:67,25:$Vm},{27:[1,68],30:69,33:[1,70],85:[1,71]},{27:[1,72],28:$Vn,33:$Vo,38:74,39:79,41:$Vp,44:$Vq,45:$Vr,85:$Vs},{41:[1,81]},{41:[1,82]},{41:[1,83]},o($Vl,[2,51]),o($Vl,[2,52]),o($Vl,[2,53]),{41:[1,84]},{25:[2,63]},{18:97,20:98,22:99,25:[2,65],27:$Vt,29:85,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{25:[2,66]},{18:97,20:98,22:99,27:$Vt,29:104,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($Vl,[2,76]),o($Vl,[2,77]),{27:[1,105]},{28:[1,106],33:$Vo,38:107,39:79,85:$VF},o($VG,[2,106]),o($VG,[2,107]),o($VG,[2,108]),o($VG,[2,109]),o($VG,[2,110]),o($VG,[2,111]),o($VG,$VH,{75:[1,109]}),{41:[1,110]},o($Vl,[2,67]),o($Vl,[2,68]),{47:[1,111]},{27:[1,113],41:[1,112]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,22]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),o($VI,$VJ,{28:$VK,41:[1,115]}),{25:[2,24],31:[1,116]},{34:[1,117]},{98:[1,118]},{28:$VL,41:[1,120]},{18:97,20:98,22:99,27:$Vt,29:121,32:122,33:$VM,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{28:[1,124],33:$Vo,39:125},o($VN,[2,45]),o($VN,[2,46]),{18:97,20:98,22:99,27:$Vt,29:129,32:130,33:$VM,41:$Vu,42:[1,126],78:127,79:128,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{27:[1,136],92:[1,131],93:[1,132],94:[1,133],95:[1,134],97:[1,135]},o($VO,[2,41]),{18:97,20:98,22:99,27:$Vt,29:137,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:138,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:139,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:140,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:141,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{25:[2,64],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{18:97,20:98,22:99,27:$Vt,29:159,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:160,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V41,[2,138]),o($V41,[2,139]),o($V41,[2,140]),o($V41,[2,141]),o($V41,[2,142]),o($V41,[2,143]),o($V41,[2,144]),o($V41,[2,146],{39:79,38:161,33:$Vo,41:$Vp,85:$Vs}),{18:97,20:98,22:99,27:$Vt,29:162,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V41,[2,148]),o($V41,[2,149]),o($V41,[2,150]),o($V41,[2,151]),o($V41,[2,152]),o($V41,[2,153]),o($V41,[2,100],{39:79,38:163,33:$Vo,85:$VF}),{42:[1,164],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{47:[1,165]},{18:97,20:98,22:99,27:$Vt,29:166,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{28:[1,167],33:$Vo,39:125},{27:[1,168]},{41:[1,169]},{18:97,20:98,22:99,27:$Vt,29:170,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{2:$V0,4:171,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{7:173,9:174,26:175,27:[1,176],68:172,74:$V51,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{70:[1,178]},{18:97,20:98,22:99,27:$Vt,29:179,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{26:183,27:$V61,42:[1,180],74:$V51,76:181,77:182,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{27:[1,185]},{27:[1,186]},{41:[1,187]},{18:97,20:98,22:99,27:$Vt,29:188,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{26:183,27:$V61,42:[1,189],74:$V51,76:190,77:182,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($VN,[2,28],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31}),o($VN,[2,29]),{18:97,20:98,22:99,27:$Vt,29:194,32:195,33:$VM,34:[1,192],36:191,37:193,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:196,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($VO,[2,40]),o($V41,[2,85]),{31:[1,198],42:[1,197]},o($V71,[2,88]),o($V71,[2,89],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31}),o($V71,[2,90]),{41:[1,199]},{41:[1,200]},{41:[1,201]},{41:[1,202]},{41:[1,203]},o($V81,[2,105]),{34:[1,204],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{42:[1,205],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{42:[1,206],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{42:[1,207],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{42:[1,208],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{18:97,20:98,22:99,27:$Vt,29:209,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:210,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:211,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:212,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:213,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V41,[2,125]),o($V41,[2,126]),{18:97,20:98,22:99,27:$Vt,29:214,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:215,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:216,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:217,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:218,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:219,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:220,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:221,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:222,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:223,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V91,[2,119],{44:$VP,45:$VQ}),o($Va1,[2,137],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11}),o($V41,[2,145],{39:125,33:$Vo}),{42:[1,224],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},o($V41,[2,101],{39:125,33:$Vo}),{71:$Vb1},{26:228,27:$Vc1,74:$V51,81:226,82:227,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{25:[2,102],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{18:97,20:98,22:99,27:$Vt,29:230,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V81,[2,104]),{42:[1,231]},{42:[1,232],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,233],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{25:[1,234]},{25:[2,71]},{25:[2,72]},{27:[1,235],30:69},{27:[1,236],28:$Vn},o([27,33],$VH),{18:97,20:98,22:99,27:$Vt,29:237,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{25:[2,23],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{47:[1,238]},{31:$Vd1,42:[1,239]},o($V71,[2,84]),{27:[1,241],33:[1,242]},{27:[1,243]},o($VI,[2,26]),{28:[1,244]},{18:97,20:98,22:99,27:$Vt,29:245,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{25:[2,25],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{47:[1,246]},{31:$Vd1,42:[1,247]},{31:[1,249],34:[1,248]},o($Ve1,[2,34]),o($Vf1,[2,36]),o($Vf1,[2,37],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31}),o($Vf1,[2,38]),{25:[2,39],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},o($V41,[2,86]),{18:97,20:98,22:99,27:$Vt,29:129,32:130,33:$VM,41:$Vu,79:250,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{42:[1,251]},{42:[1,252]},{42:[1,253]},{96:[1,254]},{96:[1,255]},o($VO,[2,42]),{25:[2,43]},{25:[2,44]},{2:$V0,6:257,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,47:[1,256],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{47:[1,258]},o($Vg1,[2,120],{44:$VP,45:$VQ,101:$VT,102:$VU,103:$VV}),o($Vg1,[2,121],{44:$VP,45:$VQ,101:$VT,102:$VU,103:$VV}),o($V91,[2,122],{44:$VP,45:$VQ}),o($V91,[2,123],{44:$VP,45:$VQ}),o($V91,[2,124],{44:$VP,45:$VQ}),o($Va1,[2,127],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Va1,[2,128],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Va1,[2,129],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Va1,[2,130],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Va1,[2,131],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Va1,[2,132],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Vg1,[2,133],{44:$VP,45:$VQ,101:$VT,102:$VU,103:$VV}),o($Vg1,[2,134],{44:$VP,45:$VQ,101:$VT,102:$VU,103:$VV}),o($Va1,[2,135],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11}),o([25,31,34,42,47,59,113],[2,136],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21}),o($V41,[2,147],{71:$Vb1}),{18:97,20:98,22:99,27:$Vt,29:259,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{31:[1,261],48:[1,260]},o($Vh1,[2,96]),{27:[1,262],33:[1,263]},{27:[1,264]},{25:[2,103],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{47:[1,265]},{47:[1,266]},{53:[1,267]},{18:97,20:98,22:99,27:$Vt,29:268,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($VI,$VJ,{28:$VK}),{28:$VL},{44:$VP,45:$VQ,47:[1,269],99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{2:$V0,4:270,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{47:[1,271]},{26:183,27:$V61,74:$V51,77:272,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($V71,[2,91]),{34:[1,273]},o($V71,[2,93]),{27:[1,275],32:274,33:$VM,35:[1,276]},{42:[1,277],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{2:$V0,4:278,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{47:[1,279]},o($Ve1,[2,33]),{18:97,20:98,22:99,27:$Vt,29:194,32:195,33:$VM,37:280,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($V71,[2,87]),o($V41,[2,113]),o($V41,[2,114]),o($V41,[2,115]),{42:[1,281]},{31:[1,282]},{2:$V0,4:283,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vl,[2,50]),{56:284,57:285,58:$Vi1,60:287,61:$Vj1},{44:$VP,45:$VQ,59:[1,289],99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{25:[2,94]},{26:228,27:$Vc1,74:$V51,82:290,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vh1,[2,97]),{34:[1,291]},o($Vh1,[2,98]),{2:$V0,4:292,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,4:293,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{41:[1,294]},{25:[1,295],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{2:$V0,4:296,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,297],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,4:298,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($V71,[2,83]),{27:[1,299]},{25:[2,30]},{25:[2,31]},{27:[1,300]},{25:[2,118]},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,301],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,4:302,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vf1,[2,35]),o($V41,[2,116]),{96:[1,303]},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,304],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{48:[1,305]},{48:[1,306],56:307,58:$Vi1,60:308,61:$Vj1},{59:[1,309]},o($Vk1,[2,61]),{18:97,20:98,22:99,27:$Vt,29:310,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{18:97,20:98,22:99,27:$Vt,29:311,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},o($Vh1,[2,95]),{27:[1,312]},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,313],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,314],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{18:97,20:98,22:99,27:$Vt,29:315,41:$Vu,83:100,84:103,91:$Vv,96:$Vw,99:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:92,119:$VC,120:$VD,121:$VE},{9:318,13:317,27:[1,319],69:316},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,320],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vl,[2,79]),{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,321],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($V71,[2,92]),{25:[2,32]},o($Vl,[2,81]),{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,322],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{42:[1,323]},o($Vl,[2,47],{49:[1,324]}),o($Vl,[2,56]),o($Vl,[2,57]),{48:[1,325]},o($Vk1,[2,60]),{2:$V0,4:326,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{44:$VP,45:$VQ,59:[1,327],99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},o($Va1,[2,75],{44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,110:$V01,111:$V11}),o($Vh1,[2,99]),o($Vl,[2,78]),o($Vl,[2,54]),{42:[1,328],44:$VP,45:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31},{42:[1,329]},{42:[2,73]},{42:[2,74]},{28:$Vn,44:$Vq,45:$Vr},o($Vl,[2,70]),o($Vl,[2,80]),o($Vl,[2,82]),o($V41,[2,117]),{14:331,46:$V5,47:[1,330]},o($Vl,[2,58]),{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[2,59],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,4:332,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{8:333,25:$Vm},{47:[1,334]},{2:$V0,4:335,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vl,[2,49]),o($Vk1,[2,62],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,50:27,51:28,52:29,72:35,73:36,84:38,65:47,66:48,6:52,2:$V0,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,67:$Vc,74:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk}),o($Vl,[2,55]),{2:$V0,4:336,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,337],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},{2:$V0,6:52,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:$V1,40:$V2,41:$V3,43:$V4,46:$V5,48:[1,338],50:27,51:28,52:29,53:$V6,54:$V7,55:$V8,62:$V9,63:$Va,64:$Vb,65:47,66:48,67:$Vc,72:35,73:36,74:$Vd,80:$Ve,84:38,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj,91:$Vk},o($Vl,[2,48]),o($Vl,[2,69])],
defaultActions: {31:[2,63],33:[2,66],51:[2,1],173:[2,71],174:[2,72],205:[2,43],206:[2,44],260:[2,94],274:[2,30],275:[2,31],277:[2,118],300:[2,32],317:[2,73],318:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Spaces Ignored
break;
case 1:// Comment inline
break;
case 2:// Comment multiline
break;
case 3:return 86;
break;
case 4:return 91;
break;
case 5:return 87;
break;
case 6:return 88;
break;
case 7:return 89;
break;
case 8:return 90;
break;
case 9:return 46;
break;
case 10:return 49;
break;
case 11:return 55;
break;
case 12:return 61;
break;
case 13:return 58;
break;
case 14:return 53;
break;
case 15:return 67;
break;
case 16:return 54;
break;
case 17:return 70;
break;
case 18:return 80;
break;
case 19:return 'RBEGIN';
break;
case 20:return 'REND';
break;
case 21:return 62;
break;
case 22:return 64;
break;
case 23:return 63;
break;
case 24:return 74;
break;
case 25:return 92;
break;
case 26:return 93;
break;
case 27:return 94;
break;
case 28:return 95;
break;
case 29:return 97;
break;
case 30:return 98;
break;
case 31:return 'RPOW';
break;
case 32:return 'RSQRT';
break;
case 33:return 'RSIN';
break;
case 34:return 'RCOS';
break;
case 35:return 'RTAN';
break;
case 36:return 40;
break;
case 37:return 43;
break;
case 38:return 75;
break;
case 39:return 120;
break;
case 40:return 121;
break;
case 41:return 59;
break;
case 42:return 31;
break;
case 43:return 111;
break;
case 44:return 35;
break;
case 45:return 41;
break;
case 46:return 42;
break;
case 47:return 85;
break;
case 48:return 33;
break;
case 49:return 34;
break;
case 50:return 25;
break;
case 51:return 47;
break;
case 52:return 48;
break;
case 53:return "INCSIGN";
break;
case 54:return "DECSIGN";
break;
case 55:return 100;
break;
case 56:return 99;
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 103;
break;
case 60:return 104;
break;
case 61:return 105;
break;
case 62:return 106;
break;
case 63:return 107;
break;
case 64:return 108;
break;
case 65:return 109;
break;
case 66:return 113;
break;
case 67:return 112;
break;
case 68:return 114;
break;
case 69:return 110;
break;
case 70:return "EQUALSIGN";
break;
case 71:return "VALUEIFTRUE";
break;
case 72:
break;
case 73:
break;
case 74:
	yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);
	yy_.yytext = yy_.yytext.replace(/\\t/g, '\t');
	yy_.yytext = yy_.yytext.replace(/\\n/g, '\n');
	yy_.yytext = yy_.yytext.replace(/\\"/g, '\"');
	yy_.yytext = yy_.yytext.replace(/\\'/g, "\'");
	yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\');
																return 116;

break;
case 75:
	yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);
	yy_.yytext = yy_.yytext.replace(/\\t/g, '\t');
	yy_.yytext = yy_.yytext.replace(/\\n/g, '\n');
	yy_.yytext = yy_.yytext.replace(/\\"/g, '\"');
	yy_.yytext = yy_.yytext.replace(/\\'/g, "\'");
	yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\');
																return 117;

break;
case 76:return 115;
break;
case 77:return 96;
break;
case 78:return 27;
break;
case 79:return 5;
break;
case 80: errors.push(new Exception("Lexical", `Lexical error ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:null\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:parse\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:main\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:,)/,/^(?:\^)/,/^(?:#)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:&)/,/^(?:=)/,/^(?:\?)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:"(\\'|\\"|\\\\|\\n|\\t|[^\'\\\"])*?")/,/^(?:'(\\'|\\"|\\t|\\n|\\\\|[^\'\\\"])?')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export {grammar, errors, clean_errors};