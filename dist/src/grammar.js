import {type, Relational_operator, Logical_operator, Arithmetic_operator, String_operator} from "./SymbolTable/Type.js"
    import { Arithmetic } from "./Expression/Arithmetic.js";
	import { Logical } from "./Expression/Logical.js";
	import { Relational } from "./Expression/Relational.js";
	import { Primitive } from "./Expression/Primitive.js";
	import { Identifier } from "./Expression/Identifier.js";
	import { StringText } from "./Expression/StringText.js";
	import { Ternary } from "./Expression/Ternary.js";
	import { Access_array } from "./Expression/Access_array.js"

	import { Declaration } from "./Instructions/Declaration.js"
	import { Declaration_array } from "./Instructions/Declaration_array.js"
	import { Assignment } from "./Instructions/Assignment.js"
	import { Print } from "./Instructions/Print.js";
	import { Inc_Dec } from "./Instructions/Inc_Dec.js";
	import { If } from "./Instructions/If.js";
	import { While } from "./Instructions/While.js";
	import { Switch } from "./Instructions/Switch.js";
	import { Case } from "./Instructions/Case.js";
	import { Break } from "./Instructions/Break.js";
	import { Return } from "./Instructions/Return.js";
	import { Continue } from "./Instructions/Continue.js";
	import { For } from "./Instructions/For.js";
	import { ForIn } from "./Instructions/ForIn.js";
	import { DoWhile } from "./Instructions/DoWhile.js";
	import { Function } from "./Instructions/Function.js";
	import { Call } from "./Instructions/Call.js";
	import Exception from "./SymbolTable/Exception.js";
	import {MainInstruction} from "./Instructions/MainInstruction.js";

    let errors = [];

	function get_errors(){
		return errors;
	}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,19],$V2=[1,20],$V3=[1,30],$V4=[1,21],$V5=[1,22],$V6=[1,40],$V7=[1,43],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,44],$Vd=[1,39],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[5,23,36,37,39,42,44,49,50,51,54,57,58,59,60,63,70,76,77,78,79,80,81],$Vl=[1,48],$Vm=[1,61],$Vn=[1,67],$Vo=[1,63],$Vp=[1,64],$Vq=[1,82],$Vr=[1,83],$Vs=[1,81],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,80],$VA=[1,85],$VB=[1,86],$VC=[23,28],$VD=[2,89],$VE=[21,27],$VF=[2,22],$VG=[1,93],$VH=[21,38],$VI=[21,24,27,28,29,38,40,41,43,55,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$VJ=[1,114],$VK=[1,115],$VL=[1,110],$VM=[1,109],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[21,27,29,38,40,41,43,55,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$V_=[1,138],$V$=[27,38],$V01=[21,27,29,38,43,55,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$V11=[21,27,29,38,43,55,94,95],$V21=[1,170],$V31=[21,27,29,38,43,55,82,83,87,88,89,90,91,92,93,94,95],$V41=[1,198],$V51=[1,202],$V61=[1,204],$V71=[44,54,57],$V81=[21,27,29],$V91=[27,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"ptcommP":7,"declaration":8,"assignment":9,"declaration_array":10,"assignment_array":11,"prod_print":12,"inc_dec":13,"prod_if":14,"prod_loops":15,"prod_switch":16,"transfer_prod":17,"prod_ternary":18,"functions":19,"call_function":20,"SEMICOLON":21,"type":22,"IDENTIFIER":23,"EQUALSIGN":24,"expression":25,"list_id":26,"COMMASIGN":27,"BRACKETLEFT":28,"BRACKETRIGHT":29,"values_array":30,"COPY":31,"list_values_array":32,"values":33,"list_brackets":34,"brackets":35,"RPRINT":36,"PARLEFT":37,"PARRIGHT":38,"RPRINTLN":39,"INCSIGN":40,"DECSIGN":41,"RIF":42,"CURLYLEFT":43,"CURLYRIGHT":44,"RELSE":45,"prod_while":46,"for_prod":47,"do_prod":48,"RWHILE":49,"RDO":50,"RSWITCH":51,"prod_default":52,"list_cases":53,"RDEFAULT":54,"TWOPOINTS":55,"case":56,"RCASE":57,"RBREAK":58,"RRETURN":59,"RCONTINUE":60,"for_it":61,"for_in":62,"RFOR":63,"for_init":64,"for_step":65,"RIN":66,"VALUEIFTRUE":67,"function_main":68,"function_general":69,"RVOID":70,"RMAIN":71,"list_params":72,"params":73,"list_params_call":74,"params_call":75,"RINT":76,"RDOUBLE":77,"RBOOLEAN":78,"RCHAR":79,"RSTRING":80,"RNULL":81,"SUBSIGN":82,"PLUSSIGN":83,"MULTSIGN":84,"DIVSIGN":85,"MODSIGN":86,"EQUALIZATIONSIGN":87,"DIFFSIGN":88,"LESSEQUAL":89,"GREATEREQUAL":90,"SMALLERTHAN":91,"GREATERTHAN":92,"CONCAT":93,"AND":94,"OR":95,"NOT":96,"INTEGER":97,"DOUBLE":98,"STRING":99,"CHAR":100,"boolean":101,"VOID":102,"RTRUE":103,"RFALSE":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"SEMICOLON",23:"IDENTIFIER",24:"EQUALSIGN",27:"COMMASIGN",28:"BRACKETLEFT",29:"BRACKETRIGHT",31:"COPY",36:"RPRINT",37:"PARLEFT",38:"PARRIGHT",39:"RPRINTLN",40:"INCSIGN",41:"DECSIGN",42:"RIF",43:"CURLYLEFT",44:"CURLYRIGHT",45:"RELSE",49:"RWHILE",50:"RDO",51:"RSWITCH",54:"RDEFAULT",55:"TWOPOINTS",57:"RCASE",58:"RBREAK",59:"RRETURN",60:"RCONTINUE",63:"RFOR",66:"RIN",67:"VALUEIFTRUE",70:"RVOID",71:"RMAIN",76:"RINT",77:"RDOUBLE",78:"RBOOLEAN",79:"RCHAR",80:"RSTRING",81:"RNULL",82:"SUBSIGN",83:"PLUSSIGN",84:"MULTSIGN",85:"DIVSIGN",86:"MODSIGN",87:"EQUALIZATIONSIGN",88:"DIFFSIGN",89:"LESSEQUAL",90:"GREATEREQUAL",91:"SMALLERTHAN",92:"GREATERTHAN",93:"CONCAT",94:"AND",95:"OR",96:"NOT",97:"INTEGER",98:"DOUBLE",99:"STRING",100:"CHAR",102:"VOID",103:"RTRUE",104:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[7,1],[8,4],[8,2],[26,3],[26,1],[9,3],[10,6],[10,6],[10,7],[30,3],[30,2],[32,3],[32,1],[33,1],[33,1],[11,4],[34,2],[34,1],[35,3],[12,4],[12,4],[13,2],[13,2],[14,7],[14,11],[14,9],[14,5],[15,1],[15,1],[15,1],[46,7],[48,9],[16,7],[16,7],[16,8],[52,3],[53,2],[53,1],[56,4],[17,1],[17,2],[17,1],[17,1],[47,1],[47,1],[61,11],[62,7],[64,1],[64,1],[65,1],[65,1],[18,7],[19,1],[19,1],[68,7],[69,7],[69,8],[72,3],[72,1],[20,3],[20,4],[74,3],[74,1],[75,1],[73,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2],[25,1],[25,3],[25,1],[101,1],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	    return $$[$0-1];
	
break;
case 2: case 34:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 30: case 35: case 76: case 80:
 this.$ = [$$[$0]]; 
break;
case 4:
 errors.push(new Exception("Sintactic", `Sintactic error ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 14: case 15: case 17: case 27: case 36: case 117:
 this.$ = $$[$0-1]; 
break;
case 11: case 12: case 13: case 16: case 31: case 32: case 45: case 46: case 47: case 53: case 61: case 62: case 65: case 66: case 67: case 68: case 70: case 71: case 81: case 118:
 this.$ = $$[$0]; 
break;
case 19:
 this.$ = new Declaration([$$[$0-2]], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 20:
 this.$ = new Declaration($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 21:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 22:
 this.$ = []; this.$.push($$[$0]); 
break;
case 23:
 this.$ = new Assignment($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = new Declaration_array($$[$0-3], $$[$0-6], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column, false); 
break;
case 28:
 this.$ = []; 
break;
case 29:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 33:
 this.$ = new Access_array(new Identifier($$[$0-3], this._$.first_line, this._$.first_column), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 37:

        this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false);
    
break;
case 38:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.INC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.DEC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 41:

        this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 42:

        this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 43:

        this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 44:

        this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 48:

        this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 49:

        this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 50:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 51:

            this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

            this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 54:
 ($$[$0] != null) ? $$[$0-1].push($$[$0]) : null; this.$ = $$[$0-1]; 
break;
case 55:
 this.$ = ($$[$0] == null) ? [] : [$$[$0]] 
break;
case 56:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 57:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 58:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 63:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 64:

        this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 69:

        this.$ = new Ternary($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 72:

        this.$ = new MainInstruction($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 73:

        this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 74:

        this.$ = new Function($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 75: case 79:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 77:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 78:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 82:

        this.$ = { type: $$[$0-1], name: $$[$0] };
    
break;
case 83:
 this.$ = type.INT; 
break;
case 84:
 this.$ = type.DOUBLE; 
break;
case 85:
 this.$ = type.BOOL; 
break;
case 86:
 this.$ = type.CHAR; 
break;
case 87:
 this.$ = type.STRING; 
break;
case 88:
 this.$ = type.NULL; 
break;
case 89:
 this.$ = type.VOID; 
break;
case 90:
 this.$ = new Arithmetic($$[$0], null, Arithmetic_operator.SUBSTRACTION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 91:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.ADDITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.SUBSTRACTION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MULTIPLICATION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MODULS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.INC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.DEC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.UNEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESSEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATEREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Logical($$[$0], null, Logical_operator.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Primitive($$[$0], type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 109:
 this.$ = new Primitive($$[$0], type.DOUBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 110:
 this.$ = new Primitive($$[$0], type.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Primitive($$[$0], type.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 112:
 this.$ = new Primitive($$[$0], type.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 113:
 this.$ = new Primitive($$[$0], type.VOID, _$[$0].first_line, _$[$0].first_column); 
break;
case 114:
 this.$ = new Primitive($$[$0], type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 115:
 this.$ = new Access_array(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 116:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 119: case 120:
 this.$ = $$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{1:[3]},{5:[1,45],6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vk,[2,3]),{7:47,21:$Vl},{7:49,21:$Vl},{7:50,21:$Vl},{7:51,21:$Vl},{7:52,21:$Vl},{7:53,21:$Vl},{7:54,21:$Vl},o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),{7:55,21:$Vl},{7:56,21:$Vl},o($Vk,[2,16]),{7:57,21:$Vl},{23:[1,58],26:59,28:[1,60]},{24:$Vm,28:$Vn,34:62,35:66,37:[1,65],40:$Vo,41:$Vp},{37:[1,68]},{37:[1,69]},{37:[1,70]},o($Vk,[2,45]),o($Vk,[2,46]),o($Vk,[2,47]),{37:[1,71]},{21:[2,57]},{18:84,21:[2,59],23:$Vq,25:72,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{21:[2,60]},{18:84,23:$Vq,25:87,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($Vk,[2,70]),o($Vk,[2,71]),o($VC,[2,83]),o($VC,[2,84]),o($VC,[2,85]),o($VC,[2,86]),o($VC,[2,87]),o($VC,[2,88]),o($VC,$VD,{71:[1,88]}),{37:[1,89]},o($Vk,[2,61]),o($Vk,[2,62]),{43:[1,90]},{23:[1,92],37:[1,91]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,18]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,17]),o($VE,$VF,{24:$VG,37:[1,94]}),{21:[2,20],27:[1,95]},{29:[1,96]},{18:84,23:$Vq,25:97,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{24:[1,98],28:$Vn,35:99},o($VH,[2,39]),o($VH,[2,40]),{18:84,23:$Vq,25:103,37:$Vr,38:[1,100],74:101,75:102,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VI,[2,35]),{18:84,23:$Vq,25:104,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:105,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:106,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:107,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:108,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{21:[2,58],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{18:84,23:$Vq,25:125,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:126,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VZ,[2,108]),o($VZ,[2,109]),o($VZ,[2,110]),o($VZ,[2,111]),o($VZ,[2,112]),o($VZ,[2,113]),o($VZ,[2,114]),o($VZ,[2,116],{35:66,34:127,28:$Vn}),{18:84,23:$Vq,25:128,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VZ,[2,118]),o($VZ,[2,119]),o($VZ,[2,120]),{38:[1,129],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{37:[1,130]},{18:84,23:$Vq,25:131,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{2:$V0,4:132,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{8:134,9:135,22:136,23:[1,137],64:133,70:$V_,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{66:[1,139]},{18:84,23:$Vq,25:140,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{22:144,38:[1,141],70:$V_,72:142,73:143,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{23:[1,145]},{23:[1,146]},o($VH,[2,23],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY}),{18:84,23:$Vq,25:147,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VI,[2,34]),{21:[2,77]},{27:[1,149],38:[1,148]},o($V$,[2,80]),o($V$,[2,81],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY}),{29:[1,150],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{38:[1,151],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{38:[1,152],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{38:[1,153],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{38:[1,154],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{18:84,23:$Vq,25:155,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:156,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:157,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:158,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:159,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VZ,[2,96]),o($VZ,[2,97]),{18:84,23:$Vq,25:160,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:161,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:162,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:163,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:164,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:165,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:166,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:167,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:168,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($V01,[2,90],{40:$VJ,41:$VK}),o($V11,[2,107],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW}),o($VZ,[2,115],{35:99,28:$Vn}),{38:[1,169],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{67:$V21},{38:[1,171]},{38:[1,172],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,173],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{21:[1,174]},{21:[2,65]},{21:[2,66]},{23:[1,175],26:59},{24:$Vm},{23:$VD},{18:84,23:$Vq,25:176,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{21:[2,19],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{43:[1,177]},{27:[1,179],38:[1,178]},o($V$,[2,76]),{23:[1,180]},o($VE,[2,21]),{24:[1,181]},{21:[2,33],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{21:[2,78]},{18:84,23:$Vq,25:103,37:$Vr,75:182,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VI,[2,36]),{21:[2,37]},{21:[2,38]},{6:184,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,43:[1,183],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{43:[1,185]},o($V31,[2,91],{40:$VJ,41:$VK,84:$VN,85:$VO,86:$VP}),o($V31,[2,92],{40:$VJ,41:$VK,84:$VN,85:$VO,86:$VP}),o($V01,[2,93],{40:$VJ,41:$VK}),o($V01,[2,94],{40:$VJ,41:$VK}),o($V01,[2,95],{40:$VJ,41:$VK}),o($V11,[2,98],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V11,[2,99],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V11,[2,100],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V11,[2,101],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V11,[2,102],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V11,[2,103],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($V31,[2,104],{40:$VJ,41:$VK,84:$VN,85:$VO,86:$VP}),o($V11,[2,105],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW}),o([21,27,29,38,43,55,95],[2,106],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX}),o($VZ,[2,117],{67:$V21}),{18:84,23:$Vq,25:186,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{43:[1,187]},{43:[1,188]},{49:[1,189]},{18:84,23:$Vq,25:190,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},o($VE,$VF,{24:$VG}),{40:$VJ,41:$VK,43:[1,191],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{2:$V0,4:192,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{43:[1,193]},{22:144,70:$V_,73:194,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($V$,[2,82]),{23:[1,196],28:$V41,30:195,31:[1,197]},o($V$,[2,79]),{2:$V0,4:199,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vk,[2,44]),{52:200,53:201,54:$V51,56:203,57:$V61},{40:$VJ,41:$VK,55:[1,205],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{2:$V0,4:206,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{2:$V0,4:207,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{37:[1,208]},{21:[1,209],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{2:$V0,4:210,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,211],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{2:$V0,4:212,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($V$,[2,75]),{21:[2,24]},{21:[2,25]},{23:[1,213]},{18:84,23:$Vq,25:217,28:$V41,29:[1,215],30:218,32:214,33:216,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,219],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{44:[1,220]},{44:[1,221],52:222,54:$V51,56:223,57:$V61},{55:[1,224]},o($V71,[2,55]),{18:84,23:$Vq,25:225,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{18:84,23:$Vq,25:226,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,227],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,228],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{18:84,23:$Vq,25:229,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{9:232,13:231,23:[1,233],65:230},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,234],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vk,[2,73]),{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,235],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{21:[2,26]},{27:[1,237],29:[1,236]},o($V81,[2,28]),o($V91,[2,30]),o($V91,[2,31],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY}),o($V91,[2,32]),o($Vk,[2,41],{45:[1,238]}),o($Vk,[2,50]),o($Vk,[2,51]),{44:[1,239]},o($V71,[2,54]),{2:$V0,4:240,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{40:$VJ,41:$VK,55:[1,241],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},o($V11,[2,69],{40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,93:$VW}),o($Vk,[2,72]),o($Vk,[2,48]),{38:[1,242],40:$VJ,41:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY},{38:[1,243]},{38:[2,67]},{38:[2,68]},{24:$Vm,40:$Vo,41:$Vp},o($Vk,[2,64]),o($Vk,[2,74]),o($V81,[2,27]),{18:84,23:$Vq,25:217,28:$V41,30:218,33:244,37:$Vr,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:79,102:$Vz,103:$VA,104:$VB},{14:246,42:$V5,43:[1,245]},o($Vk,[2,52]),{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[2,53],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{2:$V0,4:247,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{7:248,21:$Vl},{43:[1,249]},o($V91,[2,29]),{2:$V0,4:250,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vk,[2,43]),o($V71,[2,56],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,46:23,47:24,48:25,68:31,69:32,61:41,62:42,6:46,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj}),o($Vk,[2,49]),{2:$V0,4:251,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,252],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},{6:46,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:$V1,36:$V2,37:$V3,39:$V4,42:$V5,44:[1,253],46:23,47:24,48:25,49:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:41,62:42,63:$Vc,68:31,69:32,70:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vk,[2,42]),o($Vk,[2,63])],
defaultActions: {27:[2,57],29:[2,60],45:[2,1],100:[2,77],134:[2,65],135:[2,66],138:[2,89],148:[2,78],151:[2,37],152:[2,38],195:[2,24],196:[2,25],213:[2,26],231:[2,67],232:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Spaces Ignored
break;
case 1:// Comment inline
break;
case 2:// Comment multiline
break;
case 3:return 76;
break;
case 4:return 81;
break;
case 5:return 77;
break;
case 6:return 78;
break;
case 7:return 79;
break;
case 8:return 80;
break;
case 9:return 42;
break;
case 10:return 45;
break;
case 11:return 51;
break;
case 12:return 57;
break;
case 13:return 54;
break;
case 14:return 49;
break;
case 15:return 63;
break;
case 16:return 50;
break;
case 17:return 66;
break;
case 18:return 'RSTRUCT';
break;
case 19:return 'RBEGIN';
break;
case 20:return 'REND';
break;
case 21:return 58;
break;
case 22:return 60;
break;
case 23:return 59;
break;
case 24:return 70;
break;
case 25:return 'RPOW';
break;
case 26:return 'RSQRT';
break;
case 27:return 'RSIN';
break;
case 28:return 'RCOS';
break;
case 29:return 'RTAN';
break;
case 30:return 36;
break;
case 31:return 39;
break;
case 32:return 71;
break;
case 33:return 103;
break;
case 34:return 104;
break;
case 35:return 55;
break;
case 36:return 27;
break;
case 37:return 'REPETITIONSIGN';
break;
case 38:return 31;
break;
case 39:return 37;
break;
case 40:return 38;
break;
case 41:return 'COMMA';
break;
case 42:return 28;
break;
case 43:return 29;
break;
case 44:return 21;
break;
case 45:return 43;
break;
case 46:return 44;
break;
case 47:return "INCSIGN";
break;
case 48:return "DECSIGN";
break;
case 49:return 83;
break;
case 50:return 82;
break;
case 51:return 84;
break;
case 52:return 85;
break;
case 53:return 86;
break;
case 54:return 87;
break;
case 55:return 88;
break;
case 56:return 89;
break;
case 57:return 90;
break;
case 58:return 91;
break;
case 59:return 92;
break;
case 60:return 95;
break;
case 61:return 94;
break;
case 62:return 96;
break;
case 63:return 93;
break;
case 64:return "EQUALSIGN";
break;
case 65:return "VALUEIFTRUE";
break;
case 66:
break;
case 67:
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 99; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); 	return 100; 
break;
case 70:return 98;
break;
case 71:return 97;
break;
case 72:return 23;
break;
case 73:return 5;
break;
case 74: errors.push(new Exception("Lexical", `Lexical error ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:null\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:struct\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:&)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export { get_errors, grammar, errors };