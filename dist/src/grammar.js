import {type, Relational_operator, Logical_operator, Arithmetic_operator, String_operator} from "./SymbolTable/Type.js"
import { Arithmetic } from "./Expression/Arithmetic.js";
import { Logical } from "./Expression/Logical.js";
import { Relational } from "./Expression/Relational.js";
import { Primitive } from "./Expression/Primitive.js";
import { Identifier } from "./Expression/Identifier.js";
import { StringText } from "./Expression/StringText.js";
import { Ternary } from "./Expression/Ternary.js";
import { Access_array } from "./Expression/Access_array.js"

import { Declaration } from "./Instructions/Declaration.js"
import { Declaration_array } from "./Instructions/Declaration_array.js"
import { Assignment } from "./Instructions/Assignment.js"
import { Print } from "./Instructions/Print.js";
import { Inc_Dec } from "./Instructions/Inc_Dec.js";
import { If } from "./Instructions/If.js";
import { While } from "./Instructions/While.js";
import { Switch } from "./Instructions/Switch.js";
import { Case } from "./Instructions/Case.js";
import { Break } from "./Instructions/Break.js";
import { Return } from "./Instructions/Return.js";
import { Continue } from "./Instructions/Continue.js";
import { For } from "./Instructions/For.js";
import { ForIn } from "./Instructions/ForIn.js";
import { DoWhile } from "./Instructions/DoWhile.js";
import { Function } from "./Instructions/Function.js";
import { Call } from "./Instructions/Call.js";
import Exception from "./SymbolTable/Exception.js";
import {MainInstruction} from "./Instructions/MainInstruction.js";
import { Struct } from "./Instructions/Struct.js";
import { Length } from "./Nativas/Length.js";

let errors = [];

function clean_errors(){
    errors = [];
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,21],$V2=[1,22],$V3=[1,32],$V4=[1,23],$V5=[1,24],$V6=[1,43],$V7=[1,46],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,47],$Vd=[1,42],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[2,5,25,38,39,41,44,46,51,52,53,56,59,60,61,62,65,72,78,81,82,83,84,85,86],$Vm=[1,51],$Vn=[1,66],$Vo=[1,67],$Vp=[1,74],$Vq=[1,71],$Vr=[1,69],$Vs=[1,70],$Vt=[1,72],$Vu=[1,89],$Vv=[1,90],$Vw=[1,88],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,87],$VE=[1,94],$VF=[1,95],$VG=[25,30],$VH=[2,99],$VI=[23,29],$VJ=[2,25],$VK=[1,103],$VL=[23,40],$VM=[1,116],$VN=[23,26,29,30,31,40,42,43,45,57,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],$VO=[1,128],$VP=[1,129],$VQ=[1,124],$VR=[1,123],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,130],$VW=[1,131],$VX=[1,132],$VY=[1,133],$VZ=[1,134],$V_=[1,135],$V$=[1,136],$V01=[1,137],$V11=[1,138],$V21=[1,139],$V31=[23,29,31,40,42,43,45,57,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],$V41=[1,154],$V51=[29,40],$V61=[23,29,31,40,45,57,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],$V71=[23,29,31,40,45,57,102,103],$V81=[1,194],$V91=[1,198],$Va1=[23,29,31,40],$Vb1=[29,31],$Vc1=[23,29,31,40,45,57,89,90,94,95,96,97,98,99,100,101,102,103],$Vd1=[29,46],$Ve1=[1,238],$Vf1=[1,240],$Vg1=[46,56,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"declaration":7,"ptcommP":8,"assignment":9,"declaration_array":10,"assignment_array":11,"prod_print":12,"inc_dec":13,"prod_if":14,"prod_loops":15,"prod_switch":16,"transfer_prod":17,"prod_ternary":18,"functions":19,"call_function":20,"struct":21,"native_functions":22,"SEMICOLON":23,"type":24,"IDENTIFIER":25,"EQUALSIGN":26,"expression":27,"list_id":28,"COMMASIGN":29,"BRACKETLEFT":30,"BRACKETRIGHT":31,"values_array":32,"COPY":33,"list_values_array":34,"values":35,"list_brackets":36,"brackets":37,"RPRINT":38,"PARLEFT":39,"PARRIGHT":40,"RPRINTLN":41,"INCSIGN":42,"DECSIGN":43,"RIF":44,"CURLYLEFT":45,"CURLYRIGHT":46,"RELSE":47,"prod_while":48,"for_prod":49,"do_prod":50,"RWHILE":51,"RDO":52,"RSWITCH":53,"prod_default":54,"list_cases":55,"RDEFAULT":56,"TWOPOINTS":57,"case":58,"RCASE":59,"RBREAK":60,"RRETURN":61,"RCONTINUE":62,"for_it":63,"for_in":64,"RFOR":65,"for_init":66,"for_step":67,"RIN":68,"VALUEIFTRUE":69,"function_main":70,"function_general":71,"RVOID":72,"RMAIN":73,"list_params":74,"params":75,"list_params_call":76,"params_call":77,"RSTRUCT":78,"attribute_list":79,"attribute":80,"RINT":81,"RDOUBLE":82,"RBOOLEAN":83,"RCHAR":84,"RSTRING":85,"RNULL":86,"DOT":87,"RLENGTH":88,"SUBSIGN":89,"PLUSSIGN":90,"MULTSIGN":91,"DIVSIGN":92,"MODSIGN":93,"EQUALIZATIONSIGN":94,"DIFFSIGN":95,"LESSEQUAL":96,"GREATEREQUAL":97,"SMALLERTHAN":98,"GREATERTHAN":99,"CONCAT":100,"REPETITIONSIGN":101,"AND":102,"OR":103,"NOT":104,"INTEGER":105,"DOUBLE":106,"STRING":107,"CHAR":108,"boolean":109,"VOID":110,"RTRUE":111,"RFALSE":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"SEMICOLON",25:"IDENTIFIER",26:"EQUALSIGN",29:"COMMASIGN",30:"BRACKETLEFT",31:"BRACKETRIGHT",33:"COPY",38:"RPRINT",39:"PARLEFT",40:"PARRIGHT",41:"RPRINTLN",42:"INCSIGN",43:"DECSIGN",44:"RIF",45:"CURLYLEFT",46:"CURLYRIGHT",47:"RELSE",51:"RWHILE",52:"RDO",53:"RSWITCH",56:"RDEFAULT",57:"TWOPOINTS",59:"RCASE",60:"RBREAK",61:"RRETURN",62:"RCONTINUE",65:"RFOR",68:"RIN",69:"VALUEIFTRUE",72:"RVOID",73:"RMAIN",78:"RSTRUCT",81:"RINT",82:"RDOUBLE",83:"RBOOLEAN",84:"RCHAR",85:"RSTRING",86:"RNULL",87:"DOT",88:"RLENGTH",89:"SUBSIGN",90:"PLUSSIGN",91:"MULTSIGN",92:"DIVSIGN",93:"MODSIGN",94:"EQUALIZATIONSIGN",95:"DIFFSIGN",96:"LESSEQUAL",97:"GREATEREQUAL",98:"SMALLERTHAN",99:"GREATERTHAN",100:"CONCAT",101:"REPETITIONSIGN",102:"AND",103:"OR",104:"NOT",105:"INTEGER",106:"DOUBLE",107:"STRING",108:"CHAR",110:"VOID",111:"RTRUE",112:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[8,1],[7,4],[7,2],[7,4],[28,3],[28,1],[9,3],[10,6],[10,6],[10,7],[32,3],[32,2],[34,3],[34,1],[35,1],[35,1],[11,4],[36,2],[36,1],[37,3],[12,4],[12,4],[13,2],[13,2],[14,7],[14,11],[14,9],[14,5],[15,1],[15,1],[15,1],[48,7],[50,9],[16,7],[16,7],[16,8],[54,3],[55,2],[55,1],[58,4],[17,1],[17,2],[17,1],[17,1],[49,1],[49,1],[63,11],[64,7],[66,1],[66,1],[67,1],[67,1],[18,7],[19,1],[19,1],[70,7],[71,7],[71,8],[74,3],[74,1],[20,3],[20,4],[76,3],[76,1],[77,1],[77,1],[75,2],[21,5],[79,3],[79,1],[80,2],[80,2],[80,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[22,5],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,1],[27,3],[27,1],[27,1],[27,1],[109,1],[109,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	    return $$[$0-1];
	
break;
case 2: case 37:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 33: case 38: case 79: case 83: case 89:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 13: case 14: case 16: case 17: case 18: case 30: case 39: case 129:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 15: case 34: case 35: case 48: case 49: case 50: case 56: case 64: case 65: case 68: case 69: case 70: case 71: case 73: case 74: case 84: case 85: case 130: case 131: case 132:
 this.$ = $$[$0]; 
break;
case 19:
 errors.push(new Exception("Sintactic", `Sintactic error ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 21:
 this.$ = new Declaration([$$[$0-2]], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 22:
 this.$ = new Declaration($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = new Declaration([$$[$0-2], $$[$0-3]], type.STRUCT, this._$first_line, this._$first_column, $$[$0]); 
break;
case 24:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 25:
 this.$ = []; this.$.push($$[$0]); 
break;
case 26:
 this.$ = new Assignment($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 28:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column); 
break;
case 29:
 this.$ = new Declaration_array($$[$0-3], $$[$0-6], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column, false); 
break;
case 31:
 this.$ = []; 
break;
case 32:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 36:
 this.$ = new Access_array(new Identifier($$[$0-3], this._$.first_line, this._$.first_column), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 40:

        this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false);
    
break;
case 41:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 42:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.INC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.DEC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 44:

        this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 45:

        this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 46:

        this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 47:

        this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 51:

        this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

        this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 53:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 54:

            this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 55:

            this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 57:
 ($$[$0] != null) ? $$[$0-1].push($$[$0]) : null; this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = ($$[$0] == null) ? [] : [$$[$0]] 
break;
case 59:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 60:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 61:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 66:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 67:

        this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 72:

        this.$ = new Ternary($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 75:

        this.$ = new MainInstruction($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 76:

        this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 77:

        this.$ = new Function($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 78: case 82:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 80:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 86:

        this.$ = { type: $$[$0-1], name: $$[$0] };
    
break;
case 87:
 this.$ = new Struct($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 88:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 90:
 this.$ = { "type": $$[$0-1], "id": $$[$0], "value": "null", "row": this._$.first_line, "column": this._$.first_column }; 
break;
case 91:
 this.$ = { "type": type.STRUCT, "struct": $$[$0-1], "id": $$[$0], "value": "null", "row": this._$.first_line, "column": this._$.first_column}; 
break;
case 92:
 this.$ = { "type": type.ARRAY, "sub_type": $$[$0-3], "id": $$[$0], "value": [], "row": this._$.first_line, "column": this._$.first_column}; 
break;
case 93:
 this.$ = type.INT; 
break;
case 94:
 this.$ = type.DOUBLE; 
break;
case 95:
 this.$ = type.BOOL; 
break;
case 96:
 this.$ = type.CHAR; 
break;
case 97:
 this.$ = type.STRING; 
break;
case 98:
 this.$ = type.NULL; 
break;
case 99:
 this.$ = type.VOID; 
break;
case 100:

        this.$ = new Length(new Identifier($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, "length", [], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 101:
 this.$ = new Arithmetic($$[$0], null, Arithmetic_operator.SUBSTRACTION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.ADDITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.SUBSTRACTION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MULTIPLICATION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MODULS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.INC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.DEC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 110:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.UNEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 111:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESSEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 112:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATEREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 113:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 114:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 116:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.REPETITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 117:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 118:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 119:
 this.$ = new Logical($$[$0], null, Logical_operator.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 120:
 this.$ = new Primitive($$[$0], type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 121:
 this.$ = new Primitive($$[$0], type.DOUBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 122:
 this.$ = new Primitive($$[$0], type.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 123:
 this.$ = new Primitive($$[$0], type.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 124:
 this.$ = new Primitive($$[$0], type.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 125:
 this.$ = new Primitive($$[$0], type.VOID, _$[$0].first_line, _$[$0].first_column); 
break;
case 126:
 this.$ = new Primitive($$[$0], type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 127:
 this.$ = new Access_array(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 128:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 133: case 134:
 this.$ = $$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vl,[2,3]),{8:50,23:$Vm},{8:52,23:$Vm},{8:53,23:$Vm},{8:54,23:$Vm},{8:55,23:$Vm},{8:56,23:$Vm},o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),{8:57,23:$Vm},{8:58,23:$Vm},o($Vl,[2,15]),{8:59,23:$Vm},{8:60,23:$Vm},{8:61,23:$Vm},{8:62,23:$Vm},{25:[1,63],28:64,30:[1,65]},{25:$Vn,26:$Vo,30:$Vp,36:68,37:73,39:$Vq,42:$Vr,43:$Vs,87:$Vt},{39:[1,75]},{39:[1,76]},{39:[1,77]},o($Vl,[2,48]),o($Vl,[2,49]),o($Vl,[2,50]),{39:[1,78]},{23:[2,60]},{18:91,20:92,22:93,23:[2,62],25:$Vu,27:79,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{23:[2,63]},{18:91,20:92,22:93,25:$Vu,27:96,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($Vl,[2,73]),o($Vl,[2,74]),{25:[1,97]},o($VG,[2,93]),o($VG,[2,94]),o($VG,[2,95]),o($VG,[2,96]),o($VG,[2,97]),o($VG,[2,98]),o($VG,$VH,{73:[1,98]}),{39:[1,99]},o($Vl,[2,64]),o($Vl,[2,65]),{45:[1,100]},{25:[1,102],39:[1,101]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,20]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($VI,$VJ,{26:$VK,39:[1,104]}),{23:[2,22],29:[1,105]},{31:[1,106]},{26:[1,107]},{18:91,20:92,22:93,25:$Vu,27:108,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{26:[1,109],30:$Vp,37:110},o($VL,[2,42]),o($VL,[2,43]),{18:91,20:92,22:93,25:$Vu,27:114,30:$VM,32:115,39:$Vv,40:[1,111],76:112,77:113,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{88:[1,117]},o($VN,[2,38]),{18:91,20:92,22:93,25:$Vu,27:118,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:119,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:120,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:121,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:122,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{23:[2,61],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{18:91,20:92,22:93,25:$Vu,27:140,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:141,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($V31,[2,120]),o($V31,[2,121]),o($V31,[2,122]),o($V31,[2,123]),o($V31,[2,124]),o($V31,[2,125]),o($V31,[2,126]),o($V31,[2,128],{37:73,36:142,30:$Vp,39:$Vq,87:$Vt}),{18:91,20:92,22:93,25:$Vu,27:143,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($V31,[2,130]),o($V31,[2,131]),o($V31,[2,132]),o($V31,[2,133]),o($V31,[2,134]),{40:[1,144],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{45:[1,145]},{39:[1,146]},{18:91,20:92,22:93,25:$Vu,27:147,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{2:$V0,4:148,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{7:150,9:151,24:152,25:[1,153],66:149,72:$V41,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{68:[1,155]},{18:91,20:92,22:93,25:$Vu,27:156,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{24:160,40:[1,157],72:$V41,74:158,75:159,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{25:[1,161]},{25:[1,162]},{18:91,20:92,22:93,25:$Vu,27:163,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($VL,[2,26],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21}),{18:91,20:92,22:93,25:$Vu,27:164,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($VN,[2,37]),o($V31,[2,80]),{29:[1,166],40:[1,165]},o($V51,[2,83]),o($V51,[2,84],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21}),o($V51,[2,85]),{18:91,20:92,22:93,25:$Vu,27:170,30:$VM,31:[1,168],32:171,34:167,35:169,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{39:[1,172]},{31:[1,173],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{40:[1,174],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{40:[1,175],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{40:[1,176],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{40:[1,177],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{18:91,20:92,22:93,25:$Vu,27:178,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:179,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:180,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:181,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:182,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($V31,[2,107]),o($V31,[2,108]),{18:91,20:92,22:93,25:$Vu,27:183,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:184,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:185,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:186,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:187,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:188,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:189,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:190,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:191,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:192,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($V61,[2,101],{42:$VO,43:$VP}),o($V71,[2,119],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01}),o($V31,[2,127],{37:110,30:$Vp}),{40:[1,193],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{69:$V81},{24:197,25:$V91,72:$V41,79:195,80:196,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{40:[1,199]},{40:[1,200],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,201],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{23:[1,202]},{23:[2,68]},{23:[2,69]},{25:[1,203],28:64},{25:$Vn,26:$Vo},o($VG,$VH),{18:91,20:92,22:93,25:$Vu,27:204,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{23:[2,21],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{45:[1,205]},{29:[1,207],40:[1,206]},o($V51,[2,79]),{25:[1,208]},o($VI,[2,24]),{26:[1,209]},{23:[2,23],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{23:[2,36],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},o($V31,[2,81]),{18:91,20:92,22:93,25:$Vu,27:114,30:$VM,32:115,39:$Vv,77:210,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{29:[1,212],31:[1,211]},o($Va1,[2,31]),o($Vb1,[2,33]),o($Vb1,[2,34],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21}),o($Vb1,[2,35]),{40:[1,213]},o($VN,[2,39]),{23:[2,40]},{23:[2,41]},{2:$V0,6:215,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,45:[1,214],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{45:[1,216]},o($Vc1,[2,102],{42:$VO,43:$VP,91:$VS,92:$VT,93:$VU}),o($Vc1,[2,103],{42:$VO,43:$VP,91:$VS,92:$VT,93:$VU}),o($V61,[2,104],{42:$VO,43:$VP}),o($V61,[2,105],{42:$VO,43:$VP}),o($V61,[2,106],{42:$VO,43:$VP}),o($V71,[2,109],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($V71,[2,110],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($V71,[2,111],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($V71,[2,112],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($V71,[2,113],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($V71,[2,114],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($Vc1,[2,115],{42:$VO,43:$VP,91:$VS,92:$VT,93:$VU}),o($Vc1,[2,116],{42:$VO,43:$VP,91:$VS,92:$VT,93:$VU}),o($V71,[2,117],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01}),o([23,29,31,40,45,57,103],[2,118],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11}),o($V31,[2,129],{69:$V81}),{18:91,20:92,22:93,25:$Vu,27:217,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{29:[1,219],46:[1,218]},o($Vd1,[2,89]),{25:[1,220],30:[1,221]},{25:[1,222]},{45:[1,223]},{45:[1,224]},{51:[1,225]},{18:91,20:92,22:93,25:$Vu,27:226,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($VI,$VJ,{26:$VK}),{42:$VO,43:$VP,45:[1,227],89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{2:$V0,4:228,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{45:[1,229]},{24:160,72:$V41,75:230,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($V51,[2,86]),{25:[1,232],30:$VM,32:231,33:[1,233]},o($V51,[2,82]),o($Va1,[2,30]),{18:91,20:92,22:93,25:$Vu,27:170,30:$VM,32:171,35:234,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($V31,[2,100]),{2:$V0,4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vl,[2,47]),{54:236,55:237,56:$Ve1,58:239,59:$Vf1},{42:$VO,43:$VP,57:[1,241],89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{23:[2,87]},{24:197,25:$V91,72:$V41,80:242,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vd1,[2,90]),{31:[1,243]},o($Vd1,[2,91]),{2:$V0,4:244,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,4:245,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{39:[1,246]},{23:[1,247],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{2:$V0,4:248,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,249],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,4:250,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($V51,[2,78]),{23:[2,27]},{23:[2,28]},{25:[1,251]},o($Vb1,[2,32]),{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,252],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{46:[1,253]},{46:[1,254],54:255,56:$Ve1,58:256,59:$Vf1},{57:[1,257]},o($Vg1,[2,58]),{18:91,20:92,22:93,25:$Vu,27:258,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{18:91,20:92,22:93,25:$Vu,27:259,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},o($Vd1,[2,88]),{25:[1,260]},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,261],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,262],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{18:91,20:92,22:93,25:$Vu,27:263,39:$Vv,86:$Vw,89:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:86,110:$VD,111:$VE,112:$VF},{9:266,13:265,25:[1,267],67:264},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,268],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vl,[2,76]),{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,269],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{23:[2,29]},o($Vl,[2,44],{47:[1,270]}),o($Vl,[2,53]),o($Vl,[2,54]),{46:[1,271]},o($Vg1,[2,57]),{2:$V0,4:272,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{42:$VO,43:$VP,57:[1,273],89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},o($V71,[2,72],{42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,100:$V$,101:$V01}),o($Vd1,[2,92]),o($Vl,[2,75]),o($Vl,[2,51]),{40:[1,274],42:$VO,43:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21},{40:[1,275]},{40:[2,70]},{40:[2,71]},{26:$Vo,42:$Vr,43:$Vs},o($Vl,[2,67]),o($Vl,[2,77]),{14:277,44:$V5,45:[1,276]},o($Vl,[2,55]),{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[2,56],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,4:278,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{8:279,23:$Vm},{45:[1,280]},{2:$V0,4:281,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vl,[2,46]),o($Vg1,[2,59],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,48:25,49:26,50:27,70:33,71:34,63:44,64:45,6:49,2:$V0,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk}),o($Vl,[2,52]),{2:$V0,4:282,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,283],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,24:20,25:$V1,38:$V2,39:$V3,41:$V4,44:$V5,46:[1,284],48:25,49:26,50:27,51:$V6,52:$V7,53:$V8,60:$V9,61:$Va,62:$Vb,63:44,64:45,65:$Vc,70:33,71:34,72:$Vd,78:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk},o($Vl,[2,45]),o($Vl,[2,66])],
defaultActions: {29:[2,60],31:[2,63],48:[2,1],150:[2,68],151:[2,69],174:[2,40],175:[2,41],218:[2,87],231:[2,27],232:[2,28],251:[2,29],265:[2,70],266:[2,71]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Spaces Ignored
break;
case 1:// Comment inline
break;
case 2:// Comment multiline
break;
case 3:return 81;
break;
case 4:return 86;
break;
case 5:return 82;
break;
case 6:return 83;
break;
case 7:return 84;
break;
case 8:return 85;
break;
case 9:return 44;
break;
case 10:return 47;
break;
case 11:return 53;
break;
case 12:return 59;
break;
case 13:return 56;
break;
case 14:return 51;
break;
case 15:return 65;
break;
case 16:return 52;
break;
case 17:return 68;
break;
case 18:return 78;
break;
case 19:return 'RBEGIN';
break;
case 20:return 'REND';
break;
case 21:return 60;
break;
case 22:return 62;
break;
case 23:return 61;
break;
case 24:return 72;
break;
case 25:return "RLENGTH";
break;
case 26:return 'RPOW';
break;
case 27:return 'RSQRT';
break;
case 28:return 'RSIN';
break;
case 29:return 'RCOS';
break;
case 30:return 'RTAN';
break;
case 31:return 38;
break;
case 32:return 41;
break;
case 33:return 73;
break;
case 34:return 111;
break;
case 35:return 112;
break;
case 36:return 57;
break;
case 37:return 29;
break;
case 38:return 101;
break;
case 39:return 33;
break;
case 40:return 39;
break;
case 41:return 40;
break;
case 42:return 87;
break;
case 43:return 30;
break;
case 44:return 31;
break;
case 45:return 23;
break;
case 46:return 45;
break;
case 47:return 46;
break;
case 48:return "INCSIGN";
break;
case 49:return "DECSIGN";
break;
case 50:return 90;
break;
case 51:return 89;
break;
case 52:return 91;
break;
case 53:return 92;
break;
case 54:return 93;
break;
case 55:return 94;
break;
case 56:return 95;
break;
case 57:return 96;
break;
case 58:return 97;
break;
case 59:return 98;
break;
case 60:return 99;
break;
case 61:return 103;
break;
case 62:return 102;
break;
case 63:return 104;
break;
case 64:return 100;
break;
case 65:return "EQUALSIGN";
break;
case 66:return "VALUEIFTRUE";
break;
case 67:
break;
case 68:
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 107; 
break;
case 70: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); 	return 108; 
break;
case 71:return 106;
break;
case 72:return 105;
break;
case 73:return 25;
break;
case 74:return 5;
break;
case 75: errors.push(new Exception("Lexical", `Lexical error ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:null\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:struct\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:&)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export { grammar, errors, clean_errors }