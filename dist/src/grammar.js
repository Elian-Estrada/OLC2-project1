import {type, Relational_operator, Logical_operator, Arithmetic_operator, String_operator} from "./SymbolTable/Type.js"
import { Arithmetic } from "./Expression/Arithmetic.js";
import { Logical } from "./Expression/Logical.js";
import { Relational } from "./Expression/Relational.js";
import { Primitive } from "./Expression/Primitive.js";
import { Identifier } from "./Expression/Identifier.js";
import { StringText } from "./Expression/StringText.js";
import { Ternary } from "./Expression/Ternary.js";
import { Access_array } from "./Expression/Access_array.js"

import { Declaration } from "./Instructions/Declaration.js"
import { Declaration_array } from "./Instructions/Declaration_array.js"
import { Assignment } from "./Instructions/Assignment.js"
import { Print } from "./Instructions/Print.js";
import { Inc_Dec } from "./Instructions/Inc_Dec.js";
import { If } from "./Instructions/If.js";
import { While } from "./Instructions/While.js";
import { Switch } from "./Instructions/Switch.js";
import { Case } from "./Instructions/Case.js";
import { Break } from "./Instructions/Break.js";
import { Return } from "./Instructions/Return.js";
import { Continue } from "./Instructions/Continue.js";
import { For } from "./Instructions/For.js";
import { ForIn } from "./Instructions/ForIn.js";
import { DoWhile } from "./Instructions/DoWhile.js";
import { Function } from "./Instructions/Function.js";
import { Call } from "./Instructions/Call.js";
import Exception from "./SymbolTable/Exception.js";
import {MainInstruction} from "./Instructions/MainInstruction.js";
import { Struct } from "./Instructions/Struct.js";

let errors = [];

function clean_errors(){
    errors = [];
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,20],$V2=[1,21],$V3=[1,31],$V4=[1,22],$V5=[1,23],$V6=[1,42],$V7=[1,45],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,46],$Vd=[1,41],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[2,5,24,37,38,40,43,45,50,51,52,55,58,59,60,61,64,71,77,80,81,82,83,84,85],$Vm=[1,50],$Vn=[1,64],$Vo=[1,70],$Vp=[1,68],$Vq=[1,66],$Vr=[1,67],$Vs=[1,85],$Vt=[1,86],$Vu=[1,84],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,83],$VC=[1,89],$VD=[1,90],$VE=[24,29],$VF=[2,97],$VG=[22,28],$VH=[2,23],$VI=[1,98],$VJ=[22,39],$VK=[1,110],$VL=[22,25,28,29,30,39,41,42,44,56,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$VM=[1,121],$VN=[1,122],$VO=[1,117],$VP=[1,116],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,123],$VU=[1,124],$VV=[1,125],$VW=[1,126],$VX=[1,127],$VY=[1,128],$VZ=[1,129],$V_=[1,130],$V$=[1,131],$V01=[22,28,30,39,41,42,44,56,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$V11=[1,146],$V21=[28,39],$V31=[22,28,30,39,44,56,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$V41=[22,28,30,39,44,56,98,99],$V51=[1,183],$V61=[1,187],$V71=[22,28,30,39],$V81=[28,30],$V91=[22,28,30,39,44,56,86,87,91,92,93,94,95,96,97,98,99],$Va1=[28,45],$Vb1=[1,226],$Vc1=[1,228],$Vd1=[45,55,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"declaration":7,"ptcommP":8,"assignment":9,"declaration_array":10,"assignment_array":11,"prod_print":12,"inc_dec":13,"prod_if":14,"prod_loops":15,"prod_switch":16,"transfer_prod":17,"prod_ternary":18,"functions":19,"call_function":20,"struct":21,"SEMICOLON":22,"type":23,"IDENTIFIER":24,"EQUALSIGN":25,"expression":26,"list_id":27,"COMMASIGN":28,"BRACKETLEFT":29,"BRACKETRIGHT":30,"values_array":31,"COPY":32,"list_values_array":33,"values":34,"list_brackets":35,"brackets":36,"RPRINT":37,"PARLEFT":38,"PARRIGHT":39,"RPRINTLN":40,"INCSIGN":41,"DECSIGN":42,"RIF":43,"CURLYLEFT":44,"CURLYRIGHT":45,"RELSE":46,"prod_while":47,"for_prod":48,"do_prod":49,"RWHILE":50,"RDO":51,"RSWITCH":52,"prod_default":53,"list_cases":54,"RDEFAULT":55,"TWOPOINTS":56,"case":57,"RCASE":58,"RBREAK":59,"RRETURN":60,"RCONTINUE":61,"for_it":62,"for_in":63,"RFOR":64,"for_init":65,"for_step":66,"RIN":67,"VALUEIFTRUE":68,"function_main":69,"function_general":70,"RVOID":71,"RMAIN":72,"list_params":73,"params":74,"list_params_call":75,"params_call":76,"RSTRUCT":77,"attribute_list":78,"attribute":79,"RINT":80,"RDOUBLE":81,"RBOOLEAN":82,"RCHAR":83,"RSTRING":84,"RNULL":85,"SUBSIGN":86,"PLUSSIGN":87,"MULTSIGN":88,"DIVSIGN":89,"MODSIGN":90,"EQUALIZATIONSIGN":91,"DIFFSIGN":92,"LESSEQUAL":93,"GREATEREQUAL":94,"SMALLERTHAN":95,"GREATERTHAN":96,"CONCAT":97,"AND":98,"OR":99,"NOT":100,"INTEGER":101,"DOUBLE":102,"STRING":103,"CHAR":104,"boolean":105,"VOID":106,"RTRUE":107,"RFALSE":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"SEMICOLON",24:"IDENTIFIER",25:"EQUALSIGN",28:"COMMASIGN",29:"BRACKETLEFT",30:"BRACKETRIGHT",32:"COPY",37:"RPRINT",38:"PARLEFT",39:"PARRIGHT",40:"RPRINTLN",41:"INCSIGN",42:"DECSIGN",43:"RIF",44:"CURLYLEFT",45:"CURLYRIGHT",46:"RELSE",50:"RWHILE",51:"RDO",52:"RSWITCH",55:"RDEFAULT",56:"TWOPOINTS",58:"RCASE",59:"RBREAK",60:"RRETURN",61:"RCONTINUE",64:"RFOR",67:"RIN",68:"VALUEIFTRUE",71:"RVOID",72:"RMAIN",77:"RSTRUCT",80:"RINT",81:"RDOUBLE",82:"RBOOLEAN",83:"RCHAR",84:"RSTRING",85:"RNULL",86:"SUBSIGN",87:"PLUSSIGN",88:"MULTSIGN",89:"DIVSIGN",90:"MODSIGN",91:"EQUALIZATIONSIGN",92:"DIFFSIGN",93:"LESSEQUAL",94:"GREATEREQUAL",95:"SMALLERTHAN",96:"GREATERTHAN",97:"CONCAT",98:"AND",99:"OR",100:"NOT",101:"INTEGER",102:"DOUBLE",103:"STRING",104:"CHAR",106:"VOID",107:"RTRUE",108:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[8,1],[7,4],[7,2],[27,3],[27,1],[9,3],[10,6],[10,6],[10,7],[31,3],[31,2],[33,3],[33,1],[34,1],[34,1],[11,4],[35,2],[35,1],[36,3],[12,4],[12,4],[13,2],[13,2],[14,7],[14,11],[14,9],[14,5],[15,1],[15,1],[15,1],[47,7],[49,9],[16,7],[16,7],[16,8],[53,3],[54,2],[54,1],[57,4],[17,1],[17,2],[17,1],[17,1],[48,1],[48,1],[62,11],[63,7],[65,1],[65,1],[66,1],[66,1],[18,7],[19,1],[19,1],[69,7],[70,7],[70,8],[73,3],[73,1],[20,3],[20,4],[75,3],[75,1],[76,1],[76,1],[74,2],[21,5],[78,3],[78,1],[79,2],[79,2],[79,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[26,1],[26,3],[26,1],[26,1],[105,1],[105,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	    return $$[$0-1];
	
break;
case 2: case 35:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 31: case 36: case 77: case 81: case 87:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 13: case 14: case 16: case 17: case 28: case 37: case 125:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 15: case 32: case 33: case 46: case 47: case 48: case 54: case 62: case 63: case 66: case 67: case 68: case 69: case 71: case 72: case 82: case 83: case 126: case 127:
 this.$ = $$[$0]; 
break;
case 18:
 errors.push(new Exception("Sintactic", `Sintactic error ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 20:
 this.$ = new Declaration([$$[$0-2]], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 21:
 this.$ = new Declaration($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 22:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 23:
 this.$ = []; this.$.push($$[$0]); 
break;
case 24:
 this.$ = new Assignment($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = new Declaration_array($$[$0-2], $$[$0-5], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = new Declaration_array($$[$0-3], $$[$0-6], new Identifier($$[$0], this._$.first_line, this._$.first_column), [], this._$.first_line, this._$.first_column, false); 
break;
case 29:
 this.$ = []; 
break;
case 30:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 34:
 this.$ = new Access_array(new Identifier($$[$0-3], this._$.first_line, this._$.first_column), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 38:

        this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false);
    
break;
case 39:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 40:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.INC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = new Inc_Dec(new Arithmetic(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), null, Arithmetic_operator.DEC, this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 42:

        this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 43:

        this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 44:

        this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 45:

        this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 49:

        this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 50:

        this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 51:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

            this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 53:

            this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 55:
 ($$[$0] != null) ? $$[$0-1].push($$[$0]) : null; this.$ = $$[$0-1]; 
break;
case 56:
 this.$ = ($$[$0] == null) ? [] : [$$[$0]] 
break;
case 57:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 58:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 61:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 64:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 65:

        this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 70:

        this.$ = new Ternary($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 73:

        this.$ = new MainInstruction($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 74:

        this.$ = new Function($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 75:

        this.$ = new Function($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 76: case 80:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 78:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 84:

        this.$ = { type: $$[$0-1], name: $$[$0] };
    
break;
case 85:
 this.$ = new Struct($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 86:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 88:
 this.$ = { "type": $$[$0-1], "id": $$[$0], "value": "null" }; 
break;
case 89:
 this.$ = { "type": type.STRUCT, "struct": $$[$0-1], "id": $$[$0], "value": "null"}; 
break;
case 90:
 this.$ = { "type": type.ARRAY, "sub_type": $$[$0-3], "id": $$[$0], "value": []}; 
break;
case 91:
 this.$ = type.INT; 
break;
case 92:
 this.$ = type.DOUBLE; 
break;
case 93:
 this.$ = type.BOOL; 
break;
case 94:
 this.$ = type.CHAR; 
break;
case 95:
 this.$ = type.STRING; 
break;
case 96:
 this.$ = type.NULL; 
break;
case 97:
 this.$ = type.VOID; 
break;
case 98:
 this.$ = new Arithmetic($$[$0], null, Arithmetic_operator.SUBSTRACTION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.ADDITION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.SUBSTRACTION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MULTIPLICATION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Arithmetic($$[$0-2], $$[$0], Arithmetic_operator.MODULS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.INC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
 this.$ = new Arithmetic($$[$0-1], null, Arithmetic_operator.DEC, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.EQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.UNEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESSEQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATEREQUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 110:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.LESS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 111:
 this.$ = new Relational($$[$0-2], $$[$0], Relational_operator.GREATER, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 112:
 this.$ = new StringText($$[$0-2], $$[$0], String_operator.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 113:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 114:
 this.$ = new Logical($$[$0-2], $$[$0], Logical_operator.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
 this.$ = new Logical($$[$0], null, Logical_operator.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 116:
 this.$ = new Primitive($$[$0], type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 117:
 this.$ = new Primitive($$[$0], type.DOUBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 118:
 this.$ = new Primitive($$[$0], type.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 119:
 this.$ = new Primitive($$[$0], type.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 120:
 this.$ = new Primitive($$[$0], type.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 121:
 this.$ = new Primitive($$[$0], type.VOID, _$[$0].first_line, _$[$0].first_column); 
break;
case 122:
 this.$ = new Primitive($$[$0], type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 123:
 this.$ = new Access_array(new Identifier($$[$0-1], this._$.first_line, this._$.first_column), $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 124:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 128: case 129:
 this.$ = $$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vl,[2,3]),{8:49,22:$Vm},{8:51,22:$Vm},{8:52,22:$Vm},{8:53,22:$Vm},{8:54,22:$Vm},{8:55,22:$Vm},o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),{8:56,22:$Vm},{8:57,22:$Vm},o($Vl,[2,15]),{8:58,22:$Vm},{8:59,22:$Vm},{8:60,22:$Vm},{24:[1,61],27:62,29:[1,63]},{25:$Vn,29:$Vo,35:65,36:69,38:$Vp,41:$Vq,42:$Vr},{38:[1,71]},{38:[1,72]},{38:[1,73]},o($Vl,[2,46]),o($Vl,[2,47]),o($Vl,[2,48]),{38:[1,74]},{22:[2,58]},{18:87,20:88,22:[2,60],24:$Vs,26:75,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{22:[2,61]},{18:87,20:88,24:$Vs,26:91,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($Vl,[2,71]),o($Vl,[2,72]),{24:[1,92]},o($VE,[2,91]),o($VE,[2,92]),o($VE,[2,93]),o($VE,[2,94]),o($VE,[2,95]),o($VE,[2,96]),o($VE,$VF,{72:[1,93]}),{38:[1,94]},o($Vl,[2,62]),o($Vl,[2,63]),{44:[1,95]},{24:[1,97],38:[1,96]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,19]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($VG,$VH,{25:$VI,38:[1,99]}),{22:[2,21],28:[1,100]},{30:[1,101]},{18:87,20:88,24:$Vs,26:102,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{25:[1,103],29:$Vo,36:104},o($VJ,[2,40]),o($VJ,[2,41]),{18:87,20:88,24:$Vs,26:108,29:$VK,31:109,38:$Vt,39:[1,105],75:106,76:107,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($VL,[2,36]),{18:87,20:88,24:$Vs,26:111,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:112,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:113,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:114,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:115,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{22:[2,59],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{18:87,20:88,24:$Vs,26:132,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:133,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($V01,[2,116]),o($V01,[2,117]),o($V01,[2,118]),o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,124],{36:69,35:134,29:$Vo,38:$Vp}),{18:87,20:88,24:$Vs,26:135,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($V01,[2,126]),o($V01,[2,127]),o($V01,[2,128]),o($V01,[2,129]),{39:[1,136],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{44:[1,137]},{38:[1,138]},{18:87,20:88,24:$Vs,26:139,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{2:$V0,4:140,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{7:142,9:143,23:144,24:[1,145],65:141,71:$V11,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{67:[1,147]},{18:87,20:88,24:$Vs,26:148,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{23:152,39:[1,149],71:$V11,73:150,74:151,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{24:[1,153]},{24:[1,154]},o($VJ,[2,24],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$}),{18:87,20:88,24:$Vs,26:155,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($VL,[2,35]),o($V01,[2,78]),{28:[1,157],39:[1,156]},o($V21,[2,81]),o($V21,[2,82],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$}),o($V21,[2,83]),{18:87,20:88,24:$Vs,26:161,29:$VK,30:[1,159],31:162,33:158,34:160,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{30:[1,163],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{39:[1,164],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{39:[1,165],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{39:[1,166],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{39:[1,167],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{18:87,20:88,24:$Vs,26:168,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:169,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:170,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:171,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:172,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($V01,[2,104]),o($V01,[2,105]),{18:87,20:88,24:$Vs,26:173,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:174,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:175,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:176,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:177,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:178,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:179,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:180,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:181,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($V31,[2,98],{41:$VM,42:$VN}),o($V41,[2,115],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ}),o($V01,[2,123],{36:104,29:$Vo}),{39:[1,182],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{68:$V51},{23:186,24:$V61,71:$V11,78:184,79:185,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{39:[1,188]},{39:[1,189],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,190],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{22:[1,191]},{22:[2,66]},{22:[2,67]},{24:[1,192],27:62},{25:$Vn},o($VE,$VF),{18:87,20:88,24:$Vs,26:193,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{22:[2,20],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{44:[1,194]},{28:[1,196],39:[1,195]},o($V21,[2,77]),{24:[1,197]},o($VG,[2,22]),{25:[1,198]},{22:[2,34],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},o($V01,[2,79]),{18:87,20:88,24:$Vs,26:108,29:$VK,31:109,38:$Vt,76:199,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{28:[1,201],30:[1,200]},o($V71,[2,29]),o($V81,[2,31]),o($V81,[2,32],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$}),o($V81,[2,33]),o($VL,[2,37]),{22:[2,38]},{22:[2,39]},{2:$V0,6:203,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,44:[1,202],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{44:[1,204]},o($V91,[2,99],{41:$VM,42:$VN,88:$VQ,89:$VR,90:$VS}),o($V91,[2,100],{41:$VM,42:$VN,88:$VQ,89:$VR,90:$VS}),o($V31,[2,101],{41:$VM,42:$VN}),o($V31,[2,102],{41:$VM,42:$VN}),o($V31,[2,103],{41:$VM,42:$VN}),o($V41,[2,106],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V41,[2,107],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V41,[2,108],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V41,[2,109],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V41,[2,110],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V41,[2,111],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($V91,[2,112],{41:$VM,42:$VN,88:$VQ,89:$VR,90:$VS}),o($V41,[2,113],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ}),o([22,28,30,39,44,56,99],[2,114],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_}),o($V01,[2,125],{68:$V51}),{18:87,20:88,24:$Vs,26:205,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{28:[1,207],45:[1,206]},o($Va1,[2,87]),{24:[1,208],29:[1,209]},{24:[1,210]},{44:[1,211]},{44:[1,212]},{50:[1,213]},{18:87,20:88,24:$Vs,26:214,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($VG,$VH,{25:$VI}),{41:$VM,42:$VN,44:[1,215],86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{2:$V0,4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{44:[1,217]},{23:152,71:$V11,74:218,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($V21,[2,84]),{24:[1,220],29:$VK,31:219,32:[1,221]},o($V21,[2,80]),o($V71,[2,28]),{18:87,20:88,24:$Vs,26:161,29:$VK,31:162,34:222,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{2:$V0,4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vl,[2,45]),{53:224,54:225,55:$Vb1,57:227,58:$Vc1},{41:$VM,42:$VN,56:[1,229],86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{22:[2,85]},{23:186,24:$V61,71:$V11,79:230,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Va1,[2,88]),{30:[1,231]},o($Va1,[2,89]),{2:$V0,4:232,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{38:[1,234]},{22:[1,235],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{2:$V0,4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,237],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($V21,[2,76]),{22:[2,25]},{22:[2,26]},{24:[1,239]},o($V81,[2,30]),{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,240],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{45:[1,241]},{45:[1,242],53:243,55:$Vb1,57:244,58:$Vc1},{56:[1,245]},o($Vd1,[2,56]),{18:87,20:88,24:$Vs,26:246,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{18:87,20:88,24:$Vs,26:247,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},o($Va1,[2,86]),{24:[1,248]},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,249],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,250],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{18:87,20:88,24:$Vs,26:251,38:$Vt,85:$Vu,86:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:82,106:$VB,107:$VC,108:$VD},{9:254,13:253,24:[1,255],66:252},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,256],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vl,[2,74]),{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,257],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{22:[2,27]},o($Vl,[2,42],{46:[1,258]}),o($Vl,[2,51]),o($Vl,[2,52]),{45:[1,259]},o($Vd1,[2,55]),{2:$V0,4:260,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{41:$VM,42:$VN,56:[1,261],86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},o($V41,[2,70],{41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,97:$VZ}),o($Va1,[2,90]),o($Vl,[2,73]),o($Vl,[2,49]),{39:[1,262],41:$VM,42:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$},{39:[1,263]},{39:[2,68]},{39:[2,69]},{25:$Vn,41:$Vq,42:$Vr},o($Vl,[2,65]),o($Vl,[2,75]),{14:265,43:$V5,44:[1,264]},o($Vl,[2,53]),{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[2,54],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,4:266,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{8:267,22:$Vm},{44:[1,268]},{2:$V0,4:269,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vl,[2,44]),o($Vd1,[2,57],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,47:24,48:25,49:26,69:32,70:33,62:43,63:44,6:48,2:$V0,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,64:$Vc,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk}),o($Vl,[2,50]),{2:$V0,4:270,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,271],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:19,24:$V1,37:$V2,38:$V3,40:$V4,43:$V5,45:[1,272],47:24,48:25,49:26,50:$V6,51:$V7,52:$V8,59:$V9,60:$Va,61:$Vb,62:43,63:44,64:$Vc,69:32,70:33,71:$Vd,77:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vl,[2,43]),o($Vl,[2,64])],
defaultActions: {28:[2,58],30:[2,61],47:[2,1],142:[2,66],143:[2,67],164:[2,38],165:[2,39],206:[2,85],219:[2,25],220:[2,26],239:[2,27],253:[2,68],254:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Spaces Ignored
break;
case 1:// Comment inline
break;
case 2:// Comment multiline
break;
case 3:return 80;
break;
case 4:return 85;
break;
case 5:return 81;
break;
case 6:return 82;
break;
case 7:return 83;
break;
case 8:return 84;
break;
case 9:return 43;
break;
case 10:return 46;
break;
case 11:return 52;
break;
case 12:return 58;
break;
case 13:return 55;
break;
case 14:return 50;
break;
case 15:return 64;
break;
case 16:return 51;
break;
case 17:return 67;
break;
case 18:return 77;
break;
case 19:return 'RBEGIN';
break;
case 20:return 'REND';
break;
case 21:return 59;
break;
case 22:return 61;
break;
case 23:return 60;
break;
case 24:return 71;
break;
case 25:return 'RPOW';
break;
case 26:return 'RSQRT';
break;
case 27:return 'RSIN';
break;
case 28:return 'RCOS';
break;
case 29:return 'RTAN';
break;
case 30:return 37;
break;
case 31:return 40;
break;
case 32:return 72;
break;
case 33:return 107;
break;
case 34:return 108;
break;
case 35:return 56;
break;
case 36:return 28;
break;
case 37:return 'REPETITIONSIGN';
break;
case 38:return 32;
break;
case 39:return 38;
break;
case 40:return 39;
break;
case 41:return 'COMMA';
break;
case 42:return 29;
break;
case 43:return 30;
break;
case 44:return 22;
break;
case 45:return 44;
break;
case 46:return 45;
break;
case 47:return "INCSIGN";
break;
case 48:return "DECSIGN";
break;
case 49:return 87;
break;
case 50:return 86;
break;
case 51:return 88;
break;
case 52:return 89;
break;
case 53:return 90;
break;
case 54:return 91;
break;
case 55:return 92;
break;
case 56:return 93;
break;
case 57:return 94;
break;
case 58:return 95;
break;
case 59:return 96;
break;
case 60:return 99;
break;
case 61:return 98;
break;
case 62:return 100;
break;
case 63:return 97;
break;
case 64:return "EQUALSIGN";
break;
case 65:return "VALUEIFTRUE";
break;
case 66:
break;
case 67:
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 103; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); 	return 104; 
break;
case 70:return 102;
break;
case 71:return 101;
break;
case 72:return 24;
break;
case 73:return 5;
break;
case 74: errors.push(new Exception("Lexical", `Lexical error ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:null\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:struct\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:&)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export {grammar, errors, clean_errors};